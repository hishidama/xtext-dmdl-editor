/*
 * first generated by Xtext
 */
package jp.hishidama.xtext.dmdl_editor.scoping;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import jp.hishidama.xtext.dmdl_editor.dmdl.Grouping;
import jp.hishidama.xtext.dmdl_editor.dmdl.JoinExpression;
import jp.hishidama.xtext.dmdl_editor.dmdl.JoinTerm;
import jp.hishidama.xtext.dmdl_editor.dmdl.ModelDefinition;
import jp.hishidama.xtext.dmdl_editor.dmdl.ModelFolding;
import jp.hishidama.xtext.dmdl_editor.dmdl.ModelMapping;
import jp.hishidama.xtext.dmdl_editor.dmdl.ModelReference;
import jp.hishidama.xtext.dmdl_editor.dmdl.PropertyDefinition;
import jp.hishidama.xtext.dmdl_editor.dmdl.PropertyFolding;
import jp.hishidama.xtext.dmdl_editor.dmdl.PropertyMapping;
import jp.hishidama.xtext.dmdl_editor.dmdl.RecordExpression;
import jp.hishidama.xtext.dmdl_editor.dmdl.RecordTerm;
import jp.hishidama.xtext.dmdl_editor.dmdl.SummarizeExpression;
import jp.hishidama.xtext.dmdl_editor.dmdl.SummarizeTerm;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping on how and when
 * to use it
 * 
 */
public class DMDLScopeProvider extends AbstractDeclarativeScopeProvider {

	// joined
	public IScope scope_PropertyMapping_from(ModelMapping modelMapping, EReference ref) {
		JoinTerm term = EcoreUtil2.getContainerOfType(modelMapping, JoinTerm.class);
		ModelDefinition model = term.getReference().getName();

		List<EObject> list = new ArrayList<EObject>();
		add(list, model);
		return Scopes.scopeFor(list);
	}

	// joined
	public IScope scope_PropertyMapping_from(PropertyMapping property, EReference ref) {
		JoinTerm term = EcoreUtil2.getContainerOfType(property, JoinTerm.class);
		ModelDefinition model = term.getReference().getName();

		List<EObject> list = new ArrayList<EObject>();
		add(list, model);
		return Scopes.scopeFor(list);
	}

	// summarized
	public IScope scope_PropertyFolding_from(PropertyFolding property, EReference ref) {
		SummarizeTerm term = EcoreUtil2.getContainerOfType(property, SummarizeTerm.class);
		ModelDefinition model = term.getReference().getName();

		List<EObject> list = new ArrayList<EObject>();
		add(list, model);
		return Scopes.scopeFor(list);
	}

	public IScope scope_Grouping_name(Grouping group, EReference ref) {
		List<EObject> list = new ArrayList<EObject>();
		{
			JoinTerm term = EcoreUtil2.getContainerOfType(group, JoinTerm.class);
			if (term != null) {
				ModelMapping mapping = term.getMapping();
				if (mapping != null) {
					EList<PropertyMapping> properties = mapping.getMappings();
					if (properties != null) {
						list.addAll(properties);
					}
				} else {
					add(list, term.getReference());
				}
			}
		}
		{
			SummarizeTerm term = EcoreUtil2.getContainerOfType(group, SummarizeTerm.class);
			if (term != null) {
				ModelFolding folding = term.getFolding();
				if (folding != null) {
					EList<PropertyFolding> properties = folding.getFoldings();
					if (properties != null) {
						list.addAll(properties);
					}
				}
			}
		}

		return Scopes.scopeFor(list);
	}

	private void add(List<EObject> list, ModelDefinition model) {
		add(list, model, new HashSet<String>());
	}

	private void add(List<EObject> list, ModelDefinition model, Set<String> set) {
		String modelName = model.getName();
		if (set.contains(modelName)) {
			return;
		}
		set.add(modelName);

		EObject rhs = model.getRhs();
		if (rhs instanceof RecordExpression) {
			EList<RecordTerm> terms = ((RecordExpression) rhs).getTerms();
			for (RecordTerm term : terms) {
				EList<PropertyDefinition> props = term.getProperties();
				if (props != null) {
					list.addAll(props);
				}
				add(list, term.getReference(), set);
			}
		} else if (rhs instanceof JoinExpression) {
			EList<JoinTerm> terms = ((JoinExpression) rhs).getTerms();
			for (JoinTerm term : terms) {
				ModelMapping mappings = term.getMapping();
				if (mappings != null) {
					EList<PropertyMapping> props = mappings.getMappings();
					if (props != null) {
						list.addAll(props);
					}
				} else {
					add(list, term.getReference(), set);
				}
			}
		} else if (rhs instanceof SummarizeExpression) {
			EList<SummarizeTerm> terms = ((SummarizeExpression) rhs).getTerms();
			for (SummarizeTerm term : terms) {
				EList<PropertyFolding> props = term.getFolding().getFoldings();
				if (props != null) {
					list.addAll(props);
				}
			}
		}
	}

	private void add(List<EObject> list, ModelReference ref) {
		add(list, ref, new HashSet<String>());
	}

	private void add(List<EObject> list, ModelReference ref, Set<String> set) {
		if (ref != null) {
			add(list, ref.getName(), set);
		}
	}
}
