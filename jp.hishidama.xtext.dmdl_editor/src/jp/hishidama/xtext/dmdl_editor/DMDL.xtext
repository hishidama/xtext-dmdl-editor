/*
 * Asakusa Framework DMDL (DataModel Definition Language)
 * 
 * https://github.com/asakusafw/asakusafw/blob/master/dmdl-project/asakusa-dmdl-core/src/main/javacc/DmdlParser.jj
 */
grammar jp.hishidama.xtext.dmdl_editor.DMDL hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate dmdl "http://www.hishidama.jp/xtext/dmdl_editor/dmdl"

Script:
	(list+=ModelDefinition)*;

ModelDefinition:
	(description=Description)?
	(attributes=AttributeList)?
	(model=RecordModelDefinition
	| model=ProjectiveModelDefinition
	| model=JoinedModelDefinition
	| model=SummarizeModelDefinition)
	';';

RecordModelDefinition:
	name=Name '=' rhs=RecordExpression;

ProjectiveModelDefinition:
	"projective"
	name=Name '=' rhs=RecordExpression;

RecordExpression:
	terms+=RecordTerm ('+' terms+=RecordTerm)*;

RecordTerm:
	'{'
	(properties+=PropertyDefinition)+
	'}'
	| reference=ModelReference;

ModelReference:
	name=Name;

PropertyDefinition:
	(description=Description)?
	(attributes=AttributeList)?
	name=Name ':' type=Type
	';';

JoinedModelDefinition:
	"joined"
	name=Name '=' rhs=JoinExpression;

JoinExpression:
	terms+=JoinTerm ('+' terms+=JoinTerm)*;

JoinTerm:
	reference=ModelReference
	(mapping=ModelMapping)?
	(grouping=Grouping)?;

SummarizeModelDefinition:
	'summarized'
	name=Name '=' rhs=SummarizeExpression;

SummarizeExpression:
	terms+=SummarizeTerm ('+' terms+=SummarizeTerm)*;

SummarizeTerm:
	reference=ModelReference
	folding=ModelFolding
	(grouping=Grouping)?;

Description:
	STRING;

/* Attributes */
AttributeList:
	(attributes+=Attribute)+;

Attribute:
	"@" name=QualifiedName ('(' (elements=AttributeElementList ","?)? ')')?;

AttributeElementList:
	elements+=AttributeElement ("," elements+=AttributeElement)*;

AttributeElement:
	name=Name "=" value=AttributeValue;

AttributeValue:
	value=AttributeValueArray | value=QualifiedName | value=Literal;

AttributeValueArray:
	'{' elements+=AttributeValue (',' elements+=AttributeValue)* ','? '}';

Grouping:
	'%' name+=Name (',' name+=Name)*;

ModelMapping:
	'->' '{' (mappings+=PropertyMapping)+ '}';

PropertyMapping:
	(description=Description)?
	(attributes=AttributeList)?
	from=Name '->' name=Name
	';';

ModelFolding:
	'=>' '{' (foldings+=PropertyFolding)+ '}';

PropertyFolding:
	(description=Description)?
	(attributes=AttributeList)?
	aggregator=QualifiedName
	from=Name ('->' | '=>') name=Name
	';';

QualifiedName:
	name+=Name ('.' name+=Name)*;

Name:
	NAME_TOKEN | 'projective' | 'joined' | 'summarized';

terminal NAME_TOKEN:
	('a'..'z') ('a'..'z' | '0'..'9')* ('_' ('a'..'z' | '0'..'9')+)*;

/* Basic Types */
enum Type:
	INT | LONG | BYTE | SHORT | DECIMAL | FLOAT | DOUBLE | TEXT | BOOLEAN | DATE | DATETIME;

Literal:
	stringValue=STRING | intValue=INT | decimalValue=DECIMAL | booleanValue=BOOLEAN;

terminal STRING:
	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | '\\') | !('\\' | '"'))* '"';

terminal INT returns ecore::EInt:
	'0'
	| ('1'..'9') ('0'..'9')*;

terminal DECIMAL returns ecore::EBigDecimal:
	'.' ('0'..'9')+
	| "0." ('0'..'9')*
	| ('1'..'9') ('0'..'9')* '.' ('0'..'9')*;

enum BOOLEAN:
	TRUE | FALSE;

terminal ML_COMMENT:
	'/*'->'*/';

terminal SL_COMMENT:
	('//' | '--') !('\n' | '\r')* ('\r'? '\n')?;

terminal WS:
	(' ' | '\t' | '\r' | '\n')+;
