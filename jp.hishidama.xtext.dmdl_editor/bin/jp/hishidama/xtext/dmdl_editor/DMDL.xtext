/*
 * Asakusa Framework DMDL (DataModel Definition Language)
 * 
 * https://github.com/asakusafw/asakusafw/blob/master/dmdl-project/asakusa-dmdl-core/src/main/javacc/DmdlParser.jj
 */
grammar jp.hishidama.xtext.dmdl_editor.DMDL hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate dmdl "http://www.hishidama.jp/xtext/dmdl_editor/dmdl"

Script:
	(list+=ModelDefinition)*;

ModelDefinition:
	(description=Description)?
	(attributes=AttributeList)?
	((type='projective'? name=Name '=' rhs=RecordExpression)
	| (type='joined' name=Name '=' rhs=JoinExpression)
	| (type='summarized' name=Name '=' rhs=SummarizeExpression))
	';';

RecordExpression:
	terms+=RecordTerm ('+' terms+=RecordTerm)*;

RecordTerm:
	'{' {RecordTerm} (properties+=PropertyDefinition)* '}'
	| reference=ModelReference;

ModelReference:
	name=[ModelDefinition|Name];

/* Property Definitions */
PropertyDefinition:
	(description=Description)?
	(attributes=AttributeList)?
	(name=Name ':' type=Type ('=' expression=PropertyExpression)? |
	name=Name '=' expression=PropertyExpression)
	';';

PropertyExpression:
	expression=PropertyExpressionList |
	expression=PropertyExpressionMap |
	expression=PropertyExpressionRefernce;

PropertyExpressionList:
	{PropertyExpressionList} '{' '}' |
	'{' elements+=[Property|Name] (',' elements+=[Property|Name])* ','? '}';

PropertyExpressionMap:
	{PropertyExpressionMap} '{' ':' '}' |
	'{' elements+=PropertyExpressionMapEntry ("," elements+=PropertyExpressionMapEntry)* ','? '}';

PropertyExpressionMapEntry:
	name=Literal ':' property=[Property|Name];

PropertyExpressionRefernce:
	name=[Property|QualifiedName];

Type:
	basicType=BasicType | collectionType=CollectionType /*| referenceType=ReferenceType*/;

JoinExpression:
	terms+=JoinTerm ('+' terms+=JoinTerm)*;

JoinTerm:
	reference=ModelReference
	(mapping=ModelMapping)?
	(grouping=Grouping)?;

SummarizeExpression:
	terms+=SummarizeTerm ('+' terms+=SummarizeTerm)*;

SummarizeTerm:
	reference=ModelReference
	folding=ModelFolding
	(grouping=Grouping)?;

Description:
	STRING;

/* Attributes */
AttributeList:
	(attributes+=Attribute)+;

Attribute:
	"@" name=QualifiedName elementBlock=AttributeElementBlock?;

AttributeElementBlock:
	{AttributeElementBlock} '(' (elements=AttributeElementList ","?)? ')';

AttributeElementList:
	elements+=AttributeElement ("," elements+=AttributeElement)*;

AttributeElement:
	name=Name "=" value=AttributeValue;

AttributeValue:
	value=AttributeValueArray | value=AttributeValueMap | value=QualifiedNameObject | value=Literal;

AttributeValueArray:
	{AttributeValueArray} '{' '}' |
	'{' elements+=AttributeValue (',' elements+=AttributeValue)* ','? '}';

AttributeValueMap:
	{AttributeValueMap} '{' ':' '}' |
	'{' elements+=AttributePair ("," elements+=AttributePair)* ','? '}';

AttributePair:
	name=Literal ':' value=AttributeValue;

Grouping:
	'%' name+=[Property|Name] (',' name+=[Property|Name])*;

ModelMapping:
	'->' '{' {ModelMapping} (mappings+=PropertyMapping)* '}';

PropertyMapping:
	(description=Description)?
	(attributes=AttributeList)?
	from=[Property|Name] '->' name=Name
	';';

ModelFolding:
	'=>' '{' {ModelFolding} (foldings+=PropertyFolding)* '}';

PropertyFolding:
	(description=Description)?
	(attributes=AttributeList)?
	aggregator=QualifiedName
	from=[Property|Name] ('->' | '=>') name=Name
	';';

Property:
	PropertyDefinition | PropertyMapping | PropertyFolding;

QualifiedNameObject:
	name=QualifiedName;

QualifiedName returns ecore::EString:
	Name ('.' Name)*;

Name:
	NAME_TOKEN | 'projective' | 'joined' | 'summarized';

terminal NAME_TOKEN:
	(!(DIGIT_CHAR | SYMBOL_CHAR | BLANK_CHAR)) (!(SYMBOL_CHAR | BLANK_CHAR))*;

terminal fragment DIGIT_CHAR:
	'0'..'9';

terminal fragment SYMBOL_CHAR:
	'=' | '{' | '}' | '%' |
	':' |
	'<' | '>' |
	'@' | '.' | '(' | ')' |
	'"' | "'" | ',' |
	'-' | '+' | '*' | '/' |
	';';

/* Basic Types */
enum BasicType:
	INT | LONG | BYTE | SHORT | DECIMAL | FLOAT | DOUBLE | TEXT | BOOLEAN | DATE | DATETIME;

/* Collection Types */
CollectionType:
	'{' elementType=Type '}' | '{' map?=':' elementType=Type '}';

/* Reference Types */
//ReferenceType:
//	name=[Property|Name];

Literal:
	stringValue=STRING | intValue=INT | decimalValue=DECIMAL;

terminal STRING:
	'"'
	('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | '\\')
	| '\\u' HEX_CHAR HEX_CHAR HEX_CHAR HEX_CHAR
	| OCTAL_ESCAPE
	| !('\\' | '"'))*
	'"';

terminal fragment HEX_CHAR:
	'0'..'9' | 'a'..'f' | 'A'..'F';

terminal fragment OCTAL_ESCAPE:
	'\\0' (('0'..'7') | ('0'..'7') ('0'..'7') | ('0'..'3') ('0'..'7') ('0'..'7'));

terminal INT returns ecore::EInt:
	'0'
	| ('1'..'9') ('0'..'9')*;

terminal DECIMAL returns ecore::EBigDecimal:
	'.' ('0'..'9')+
	| "0." ('0'..'9')*
	| ('1'..'9') ('0'..'9')* '.' ('0'..'9')*;

terminal ML_COMMENT:
	'/*'->'*/';

terminal SL_COMMENT:
	('//' | '--') !('\n' | '\r')* ('\r'? '\n')?;

terminal WS:
	BLANK_CHAR+;

terminal fragment BLANK_CHAR:
	' ' | '\t' | '\r' | '\n';
