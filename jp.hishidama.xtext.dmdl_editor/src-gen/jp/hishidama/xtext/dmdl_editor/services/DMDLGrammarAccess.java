/*
* generated by Xtext
*/
package jp.hishidama.xtext.dmdl_editor.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class DMDLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Models");
		private final Assignment cListAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cListModelDefinitionParserRuleCall_0 = (RuleCall)cListAssignment.eContents().get(0);
		
		//Models:
		//
		//	list+=ModelDefinition*;
		public ParserRule getRule() { return rule; }

		//list+=ModelDefinition*
		public Assignment getListAssignment() { return cListAssignment; }

		//ModelDefinition
		public RuleCall getListModelDefinitionParserRuleCall_0() { return cListModelDefinitionParserRuleCall_0; }
	}

	public class ModelDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ModelDefinition:
		//
		//	name=Name "=" "{" "}" ";";
		public ParserRule getRule() { return rule; }

		//name=Name "=" "{" "}" ";"
		public Group getGroup() { return cGroup; }

		//name=Name
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_0() { return cNameNameParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Name");
		private final RuleCall cNAME_TOKENTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Name:
		//
		//	NAME_TOKEN;
		public ParserRule getRule() { return rule; }

		//NAME_TOKEN
		public RuleCall getNAME_TOKENTerminalRuleCall() { return cNAME_TOKENTerminalRuleCall; }
	}
	
	
	private ModelsElements pModels;
	private ModelDefinitionElements pModelDefinition;
	private NameElements pName;
	private TerminalRule tNAME_TOKEN;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public DMDLGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("jp.hishidama.xtext.dmdl_editor.DMDL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Models:
	//
	//	list+=ModelDefinition*;
	public ModelsElements getModelsAccess() {
		return (pModels != null) ? pModels : (pModels = new ModelsElements());
	}
	
	public ParserRule getModelsRule() {
		return getModelsAccess().getRule();
	}

	//ModelDefinition:
	//
	//	name=Name "=" "{" "}" ";";
	public ModelDefinitionElements getModelDefinitionAccess() {
		return (pModelDefinition != null) ? pModelDefinition : (pModelDefinition = new ModelDefinitionElements());
	}
	
	public ParserRule getModelDefinitionRule() {
		return getModelDefinitionAccess().getRule();
	}

	//Name:
	//
	//	NAME_TOKEN;
	public NameElements getNameAccess() {
		return (pName != null) ? pName : (pName = new NameElements());
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}

	//terminal NAME_TOKEN:
	//
	//	"a".."z" ("a".."z" | "0".."9")* ("_" ("a".."z" | "0".."9")+)*;
	public TerminalRule getNAME_TOKENRule() {
		return (tNAME_TOKEN != null) ? tNAME_TOKEN : (tNAME_TOKEN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NAME_TOKEN"));
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//
	//	("//" | "--") !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 
}
