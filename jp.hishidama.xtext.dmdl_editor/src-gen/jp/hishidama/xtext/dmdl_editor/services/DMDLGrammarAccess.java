/*
* generated by Xtext
*/
package jp.hishidama.xtext.dmdl_editor.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class DMDLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Script");
		private final Assignment cListAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cListModelDefinitionParserRuleCall_0 = (RuleCall)cListAssignment.eContents().get(0);
		
		//Script:
		//
		//	list+=ModelDefinition*;
		public ParserRule getRule() { return rule; }

		//list+=ModelDefinition*
		public Assignment getListAssignment() { return cListAssignment; }

		//ModelDefinition
		public RuleCall getListModelDefinitionParserRuleCall_0() { return cListModelDefinitionParserRuleCall_0; }
	}

	public class ModelDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescriptionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDescriptionDescriptionParserRuleCall_0_0 = (RuleCall)cDescriptionAssignment_0.eContents().get(0);
		private final Assignment cAttributesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributesAttributeListParserRuleCall_1_0 = (RuleCall)cAttributesAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final Keyword cTypeProjectiveKeyword_2_0_0_0 = (Keyword)cTypeAssignment_2_0_0.eContents().get(0);
		private final Assignment cNameAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_2_0_1_0 = (RuleCall)cNameAssignment_2_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Assignment cRhsAssignment_2_0_3 = (Assignment)cGroup_2_0.eContents().get(3);
		private final RuleCall cRhsRecordExpressionParserRuleCall_2_0_3_0 = (RuleCall)cRhsAssignment_2_0_3.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cTypeAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final Keyword cTypeJoinedKeyword_2_1_0_0 = (Keyword)cTypeAssignment_2_1_0.eContents().get(0);
		private final Assignment cNameAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_2_1_1_0 = (RuleCall)cNameAssignment_2_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Assignment cRhsAssignment_2_1_3 = (Assignment)cGroup_2_1.eContents().get(3);
		private final RuleCall cRhsJoinExpressionParserRuleCall_2_1_3_0 = (RuleCall)cRhsAssignment_2_1_3.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cAlternatives_2.eContents().get(2);
		private final Assignment cTypeAssignment_2_2_0 = (Assignment)cGroup_2_2.eContents().get(0);
		private final Keyword cTypeSummarizedKeyword_2_2_0_0 = (Keyword)cTypeAssignment_2_2_0.eContents().get(0);
		private final Assignment cNameAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_2_2_1_0 = (RuleCall)cNameAssignment_2_2_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_2_2 = (Keyword)cGroup_2_2.eContents().get(2);
		private final Assignment cRhsAssignment_2_2_3 = (Assignment)cGroup_2_2.eContents().get(3);
		private final RuleCall cRhsSummarizeExpressionParserRuleCall_2_2_3_0 = (RuleCall)cRhsAssignment_2_2_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ModelDefinition:
		//
		//	description=Description? attributes=AttributeList? (type="projective"? name=Name "=" rhs=RecordExpression |
		//
		//	type="joined" name=Name "=" rhs=JoinExpression | type="summarized" name=Name "=" rhs=SummarizeExpression) ";";
		public ParserRule getRule() { return rule; }

		//description=Description? attributes=AttributeList? (type="projective"? name=Name "=" rhs=RecordExpression |
		//
		//type="joined" name=Name "=" rhs=JoinExpression | type="summarized" name=Name "=" rhs=SummarizeExpression) ";"
		public Group getGroup() { return cGroup; }

		//description=Description?
		public Assignment getDescriptionAssignment_0() { return cDescriptionAssignment_0; }

		//Description
		public RuleCall getDescriptionDescriptionParserRuleCall_0_0() { return cDescriptionDescriptionParserRuleCall_0_0; }

		//attributes=AttributeList?
		public Assignment getAttributesAssignment_1() { return cAttributesAssignment_1; }

		//AttributeList
		public RuleCall getAttributesAttributeListParserRuleCall_1_0() { return cAttributesAttributeListParserRuleCall_1_0; }

		//type="projective"? name=Name "=" rhs=RecordExpression | type="joined" name=Name "=" rhs=JoinExpression |
		//
		//type="summarized" name=Name "=" rhs=SummarizeExpression
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//type="projective"? name=Name "=" rhs=RecordExpression
		public Group getGroup_2_0() { return cGroup_2_0; }

		//type="projective"?
		public Assignment getTypeAssignment_2_0_0() { return cTypeAssignment_2_0_0; }

		//"projective"
		public Keyword getTypeProjectiveKeyword_2_0_0_0() { return cTypeProjectiveKeyword_2_0_0_0; }

		//name=Name
		public Assignment getNameAssignment_2_0_1() { return cNameAssignment_2_0_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_2_0_1_0() { return cNameNameParserRuleCall_2_0_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_0_2() { return cEqualsSignKeyword_2_0_2; }

		//rhs=RecordExpression
		public Assignment getRhsAssignment_2_0_3() { return cRhsAssignment_2_0_3; }

		//RecordExpression
		public RuleCall getRhsRecordExpressionParserRuleCall_2_0_3_0() { return cRhsRecordExpressionParserRuleCall_2_0_3_0; }

		//type="joined" name=Name "=" rhs=JoinExpression
		public Group getGroup_2_1() { return cGroup_2_1; }

		//type="joined"
		public Assignment getTypeAssignment_2_1_0() { return cTypeAssignment_2_1_0; }

		//"joined"
		public Keyword getTypeJoinedKeyword_2_1_0_0() { return cTypeJoinedKeyword_2_1_0_0; }

		//name=Name
		public Assignment getNameAssignment_2_1_1() { return cNameAssignment_2_1_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_2_1_1_0() { return cNameNameParserRuleCall_2_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_2() { return cEqualsSignKeyword_2_1_2; }

		//rhs=JoinExpression
		public Assignment getRhsAssignment_2_1_3() { return cRhsAssignment_2_1_3; }

		//JoinExpression
		public RuleCall getRhsJoinExpressionParserRuleCall_2_1_3_0() { return cRhsJoinExpressionParserRuleCall_2_1_3_0; }

		//type="summarized" name=Name "=" rhs=SummarizeExpression
		public Group getGroup_2_2() { return cGroup_2_2; }

		//type="summarized"
		public Assignment getTypeAssignment_2_2_0() { return cTypeAssignment_2_2_0; }

		//"summarized"
		public Keyword getTypeSummarizedKeyword_2_2_0_0() { return cTypeSummarizedKeyword_2_2_0_0; }

		//name=Name
		public Assignment getNameAssignment_2_2_1() { return cNameAssignment_2_2_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_2_2_1_0() { return cNameNameParserRuleCall_2_2_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_2_2() { return cEqualsSignKeyword_2_2_2; }

		//rhs=SummarizeExpression
		public Assignment getRhsAssignment_2_2_3() { return cRhsAssignment_2_2_3; }

		//SummarizeExpression
		public RuleCall getRhsSummarizeExpressionParserRuleCall_2_2_3_0() { return cRhsSummarizeExpressionParserRuleCall_2_2_3_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class RecordExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RecordExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTermsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTermsRecordTermParserRuleCall_0_0 = (RuleCall)cTermsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTermsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTermsRecordTermParserRuleCall_1_1_0 = (RuleCall)cTermsAssignment_1_1.eContents().get(0);
		
		//RecordExpression:
		//
		//	terms+=RecordTerm ("+" terms+=RecordTerm)*;
		public ParserRule getRule() { return rule; }

		//terms+=RecordTerm ("+" terms+=RecordTerm)*
		public Group getGroup() { return cGroup; }

		//terms+=RecordTerm
		public Assignment getTermsAssignment_0() { return cTermsAssignment_0; }

		//RecordTerm
		public RuleCall getTermsRecordTermParserRuleCall_0_0() { return cTermsRecordTermParserRuleCall_0_0; }

		//("+" terms+=RecordTerm)*
		public Group getGroup_1() { return cGroup_1; }

		//"+"
		public Keyword getPlusSignKeyword_1_0() { return cPlusSignKeyword_1_0; }

		//terms+=RecordTerm
		public Assignment getTermsAssignment_1_1() { return cTermsAssignment_1_1; }

		//RecordTerm
		public RuleCall getTermsRecordTermParserRuleCall_1_1_0() { return cTermsRecordTermParserRuleCall_1_1_0; }
	}

	public class RecordTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RecordTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cPropertiesAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPropertiesPropertyDefinitionParserRuleCall_0_1_0 = (RuleCall)cPropertiesAssignment_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cReferenceAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cReferenceModelReferenceParserRuleCall_1_0 = (RuleCall)cReferenceAssignment_1.eContents().get(0);
		
		//RecordTerm:
		//
		//	"{" properties+=PropertyDefinition+ "}" | reference=ModelReference;
		public ParserRule getRule() { return rule; }

		//"{" properties+=PropertyDefinition+ "}" | reference=ModelReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//"{" properties+=PropertyDefinition+ "}"
		public Group getGroup_0() { return cGroup_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_0() { return cLeftCurlyBracketKeyword_0_0; }

		//properties+=PropertyDefinition+
		public Assignment getPropertiesAssignment_0_1() { return cPropertiesAssignment_0_1; }

		//PropertyDefinition
		public RuleCall getPropertiesPropertyDefinitionParserRuleCall_0_1_0() { return cPropertiesPropertyDefinitionParserRuleCall_0_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_2() { return cRightCurlyBracketKeyword_0_2; }

		//reference=ModelReference
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }

		//ModelReference
		public RuleCall getReferenceModelReferenceParserRuleCall_1_0() { return cReferenceModelReferenceParserRuleCall_1_0; }
	}

	public class ModelReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelReference");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cNameModelDefinitionCrossReference_0 = (CrossReference)cNameAssignment.eContents().get(0);
		private final RuleCall cNameModelDefinitionNameParserRuleCall_0_1 = (RuleCall)cNameModelDefinitionCrossReference_0.eContents().get(1);
		
		//ModelReference:
		//
		//	name=[ModelDefinition|Name];
		public ParserRule getRule() { return rule; }

		//name=[ModelDefinition|Name]
		public Assignment getNameAssignment() { return cNameAssignment; }

		//[ModelDefinition|Name]
		public CrossReference getNameModelDefinitionCrossReference_0() { return cNameModelDefinitionCrossReference_0; }

		//Name
		public RuleCall getNameModelDefinitionNameParserRuleCall_0_1() { return cNameModelDefinitionNameParserRuleCall_0_1; }
	}

	public class PropertyDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescriptionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDescriptionDescriptionParserRuleCall_0_0 = (RuleCall)cDescriptionAssignment_0.eContents().get(0);
		private final Assignment cAttributesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributesAttributeListParserRuleCall_1_0 = (RuleCall)cAttributesAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeTypeEnumRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PropertyDefinition:
		//
		//	description=Description? attributes=AttributeList? name=Name ":" type=Type ";";
		public ParserRule getRule() { return rule; }

		//description=Description? attributes=AttributeList? name=Name ":" type=Type ";"
		public Group getGroup() { return cGroup; }

		//description=Description?
		public Assignment getDescriptionAssignment_0() { return cDescriptionAssignment_0; }

		//Description
		public RuleCall getDescriptionDescriptionParserRuleCall_0_0() { return cDescriptionDescriptionParserRuleCall_0_0; }

		//attributes=AttributeList?
		public Assignment getAttributesAssignment_1() { return cAttributesAssignment_1; }

		//AttributeList
		public RuleCall getAttributesAttributeListParserRuleCall_1_0() { return cAttributesAttributeListParserRuleCall_1_0; }

		//name=Name
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Name
		public RuleCall getNameNameParserRuleCall_2_0() { return cNameNameParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//type=Type
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//Type
		public RuleCall getTypeTypeEnumRuleCall_4_0() { return cTypeTypeEnumRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class JoinExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JoinExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTermsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTermsJoinTermParserRuleCall_0_0 = (RuleCall)cTermsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTermsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTermsJoinTermParserRuleCall_1_1_0 = (RuleCall)cTermsAssignment_1_1.eContents().get(0);
		
		//JoinExpression:
		//
		//	terms+=JoinTerm ("+" terms+=JoinTerm)*;
		public ParserRule getRule() { return rule; }

		//terms+=JoinTerm ("+" terms+=JoinTerm)*
		public Group getGroup() { return cGroup; }

		//terms+=JoinTerm
		public Assignment getTermsAssignment_0() { return cTermsAssignment_0; }

		//JoinTerm
		public RuleCall getTermsJoinTermParserRuleCall_0_0() { return cTermsJoinTermParserRuleCall_0_0; }

		//("+" terms+=JoinTerm)*
		public Group getGroup_1() { return cGroup_1; }

		//"+"
		public Keyword getPlusSignKeyword_1_0() { return cPlusSignKeyword_1_0; }

		//terms+=JoinTerm
		public Assignment getTermsAssignment_1_1() { return cTermsAssignment_1_1; }

		//JoinTerm
		public RuleCall getTermsJoinTermParserRuleCall_1_1_0() { return cTermsJoinTermParserRuleCall_1_1_0; }
	}

	public class JoinTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JoinTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReferenceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReferenceModelReferenceParserRuleCall_0_0 = (RuleCall)cReferenceAssignment_0.eContents().get(0);
		private final Assignment cMappingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMappingModelMappingParserRuleCall_1_0 = (RuleCall)cMappingAssignment_1.eContents().get(0);
		private final Assignment cGroupingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGroupingGroupingParserRuleCall_2_0 = (RuleCall)cGroupingAssignment_2.eContents().get(0);
		
		//JoinTerm:
		//
		//	reference=ModelReference mapping=ModelMapping? grouping=Grouping?;
		public ParserRule getRule() { return rule; }

		//reference=ModelReference mapping=ModelMapping? grouping=Grouping?
		public Group getGroup() { return cGroup; }

		//reference=ModelReference
		public Assignment getReferenceAssignment_0() { return cReferenceAssignment_0; }

		//ModelReference
		public RuleCall getReferenceModelReferenceParserRuleCall_0_0() { return cReferenceModelReferenceParserRuleCall_0_0; }

		//mapping=ModelMapping?
		public Assignment getMappingAssignment_1() { return cMappingAssignment_1; }

		//ModelMapping
		public RuleCall getMappingModelMappingParserRuleCall_1_0() { return cMappingModelMappingParserRuleCall_1_0; }

		//grouping=Grouping?
		public Assignment getGroupingAssignment_2() { return cGroupingAssignment_2; }

		//Grouping
		public RuleCall getGroupingGroupingParserRuleCall_2_0() { return cGroupingGroupingParserRuleCall_2_0; }
	}

	public class SummarizeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SummarizeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTermsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTermsSummarizeTermParserRuleCall_0_0 = (RuleCall)cTermsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTermsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTermsSummarizeTermParserRuleCall_1_1_0 = (RuleCall)cTermsAssignment_1_1.eContents().get(0);
		
		//SummarizeExpression:
		//
		//	terms+=SummarizeTerm ("+" terms+=SummarizeTerm)*;
		public ParserRule getRule() { return rule; }

		//terms+=SummarizeTerm ("+" terms+=SummarizeTerm)*
		public Group getGroup() { return cGroup; }

		//terms+=SummarizeTerm
		public Assignment getTermsAssignment_0() { return cTermsAssignment_0; }

		//SummarizeTerm
		public RuleCall getTermsSummarizeTermParserRuleCall_0_0() { return cTermsSummarizeTermParserRuleCall_0_0; }

		//("+" terms+=SummarizeTerm)*
		public Group getGroup_1() { return cGroup_1; }

		//"+"
		public Keyword getPlusSignKeyword_1_0() { return cPlusSignKeyword_1_0; }

		//terms+=SummarizeTerm
		public Assignment getTermsAssignment_1_1() { return cTermsAssignment_1_1; }

		//SummarizeTerm
		public RuleCall getTermsSummarizeTermParserRuleCall_1_1_0() { return cTermsSummarizeTermParserRuleCall_1_1_0; }
	}

	public class SummarizeTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SummarizeTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReferenceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReferenceModelReferenceParserRuleCall_0_0 = (RuleCall)cReferenceAssignment_0.eContents().get(0);
		private final Assignment cFoldingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFoldingModelFoldingParserRuleCall_1_0 = (RuleCall)cFoldingAssignment_1.eContents().get(0);
		private final Assignment cGroupingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGroupingGroupingParserRuleCall_2_0 = (RuleCall)cGroupingAssignment_2.eContents().get(0);
		
		//SummarizeTerm:
		//
		//	reference=ModelReference folding=ModelFolding grouping=Grouping?;
		public ParserRule getRule() { return rule; }

		//reference=ModelReference folding=ModelFolding grouping=Grouping?
		public Group getGroup() { return cGroup; }

		//reference=ModelReference
		public Assignment getReferenceAssignment_0() { return cReferenceAssignment_0; }

		//ModelReference
		public RuleCall getReferenceModelReferenceParserRuleCall_0_0() { return cReferenceModelReferenceParserRuleCall_0_0; }

		//folding=ModelFolding
		public Assignment getFoldingAssignment_1() { return cFoldingAssignment_1; }

		//ModelFolding
		public RuleCall getFoldingModelFoldingParserRuleCall_1_0() { return cFoldingModelFoldingParserRuleCall_1_0; }

		//grouping=Grouping?
		public Assignment getGroupingAssignment_2() { return cGroupingAssignment_2; }

		//Grouping
		public RuleCall getGroupingGroupingParserRuleCall_2_0() { return cGroupingGroupingParserRuleCall_2_0; }
	}

	public class DescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Description");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Description:
		//
		//	STRING;
		public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class AttributeListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeList");
		private final Assignment cAttributesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_0 = (RuleCall)cAttributesAssignment.eContents().get(0);
		
		/// * Attributes * / AttributeList:
		//
		//	attributes+=Attribute+;
		public ParserRule getRule() { return rule; }

		//attributes+=Attribute+
		public Assignment getAttributesAssignment() { return cAttributesAssignment; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_0() { return cAttributesAttributeParserRuleCall_0; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cElementBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementBlockAttributeElementBlockParserRuleCall_2_0 = (RuleCall)cElementBlockAssignment_2.eContents().get(0);
		
		//Attribute:
		//
		//	"@" name=QualifiedName elementBlock=AttributeElementBlock?;
		public ParserRule getRule() { return rule; }

		//"@" name=QualifiedName elementBlock=AttributeElementBlock?
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//elementBlock=AttributeElementBlock?
		public Assignment getElementBlockAssignment_2() { return cElementBlockAssignment_2; }

		//AttributeElementBlock
		public RuleCall getElementBlockAttributeElementBlockParserRuleCall_2_0() { return cElementBlockAttributeElementBlockParserRuleCall_2_0; }
	}

	public class AttributeElementBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeElementBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeElementBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementsAttributeElementListParserRuleCall_2_0_0 = (RuleCall)cElementsAssignment_2_0.eContents().get(0);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AttributeElementBlock:
		//
		//	{AttributeElementBlock} "(" (elements=AttributeElementList ","?)? ")";
		public ParserRule getRule() { return rule; }

		//{AttributeElementBlock} "(" (elements=AttributeElementList ","?)? ")"
		public Group getGroup() { return cGroup; }

		//{AttributeElementBlock}
		public Action getAttributeElementBlockAction_0() { return cAttributeElementBlockAction_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(elements=AttributeElementList ","?)?
		public Group getGroup_2() { return cGroup_2; }

		//elements=AttributeElementList
		public Assignment getElementsAssignment_2_0() { return cElementsAssignment_2_0; }

		//AttributeElementList
		public RuleCall getElementsAttributeElementListParserRuleCall_2_0_0() { return cElementsAttributeElementListParserRuleCall_2_0_0; }

		//","?
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class AttributeElementListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeElementList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsAttributeElementParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementsAttributeElementParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		
		//AttributeElementList:
		//
		//	elements+=AttributeElement ("," elements+=AttributeElement)*;
		public ParserRule getRule() { return rule; }

		//elements+=AttributeElement ("," elements+=AttributeElement)*
		public Group getGroup() { return cGroup; }

		//elements+=AttributeElement
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }

		//AttributeElement
		public RuleCall getElementsAttributeElementParserRuleCall_0_0() { return cElementsAttributeElementParserRuleCall_0_0; }

		//("," elements+=AttributeElement)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//elements+=AttributeElement
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }

		//AttributeElement
		public RuleCall getElementsAttributeElementParserRuleCall_1_1_0() { return cElementsAttributeElementParserRuleCall_1_1_0; }
	}

	public class AttributeElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueAttributeValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//AttributeElement:
		//
		//	name=Name "=" value=AttributeValue;
		public ParserRule getRule() { return rule; }

		//name=Name "=" value=AttributeValue
		public Group getGroup() { return cGroup; }

		//name=Name
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_0() { return cNameNameParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=AttributeValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//AttributeValue
		public RuleCall getValueAttributeValueParserRuleCall_2_0() { return cValueAttributeValueParserRuleCall_2_0; }
	}

	public class AttributeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueAttributeValueArrayParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueQualifiedNameObjectParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cValueLiteralParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//AttributeValue:
		//
		//	value=AttributeValueArray | value=QualifiedNameObject | value=Literal;
		public ParserRule getRule() { return rule; }

		//value=AttributeValueArray | value=QualifiedNameObject | value=Literal
		public Alternatives getAlternatives() { return cAlternatives; }

		//value=AttributeValueArray
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//AttributeValueArray
		public RuleCall getValueAttributeValueArrayParserRuleCall_0_0() { return cValueAttributeValueArrayParserRuleCall_0_0; }

		//value=QualifiedNameObject
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//QualifiedNameObject
		public RuleCall getValueQualifiedNameObjectParserRuleCall_1_0() { return cValueQualifiedNameObjectParserRuleCall_1_0; }

		//value=Literal
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Literal
		public RuleCall getValueLiteralParserRuleCall_2_0() { return cValueLiteralParserRuleCall_2_0; }
	}

	public class AttributeValueArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeValueArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsAttributeValueParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElementsAttributeValueParserRuleCall_2_1_0 = (RuleCall)cElementsAssignment_2_1.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AttributeValueArray:
		//
		//	"{" elements+=AttributeValue ("," elements+=AttributeValue)* ","? "}";
		public ParserRule getRule() { return rule; }

		//"{" elements+=AttributeValue ("," elements+=AttributeValue)* ","? "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//elements+=AttributeValue
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }

		//AttributeValue
		public RuleCall getElementsAttributeValueParserRuleCall_1_0() { return cElementsAttributeValueParserRuleCall_1_0; }

		//("," elements+=AttributeValue)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//elements+=AttributeValue
		public Assignment getElementsAssignment_2_1() { return cElementsAssignment_2_1; }

		//AttributeValue
		public RuleCall getElementsAttributeValueParserRuleCall_2_1_0() { return cElementsAttributeValueParserRuleCall_2_1_0; }

		//","?
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class GroupingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Grouping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPercentSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNamePropertyCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNamePropertyNameParserRuleCall_1_0_1 = (RuleCall)cNamePropertyCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cNamePropertyCrossReference_2_1_0 = (CrossReference)cNameAssignment_2_1.eContents().get(0);
		private final RuleCall cNamePropertyNameParserRuleCall_2_1_0_1 = (RuleCall)cNamePropertyCrossReference_2_1_0.eContents().get(1);
		
		//Grouping:
		//
		//	"%" name+=[Property|Name] ("," name+=[Property|Name])*;
		public ParserRule getRule() { return rule; }

		//"%" name+=[Property|Name] ("," name+=[Property|Name])*
		public Group getGroup() { return cGroup; }

		//"%"
		public Keyword getPercentSignKeyword_0() { return cPercentSignKeyword_0; }

		//name+=[Property|Name]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//[Property|Name]
		public CrossReference getNamePropertyCrossReference_1_0() { return cNamePropertyCrossReference_1_0; }

		//Name
		public RuleCall getNamePropertyNameParserRuleCall_1_0_1() { return cNamePropertyNameParserRuleCall_1_0_1; }

		//("," name+=[Property|Name])*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//name+=[Property|Name]
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//[Property|Name]
		public CrossReference getNamePropertyCrossReference_2_1_0() { return cNamePropertyCrossReference_2_1_0; }

		//Name
		public RuleCall getNamePropertyNameParserRuleCall_2_1_0_1() { return cNamePropertyNameParserRuleCall_2_1_0_1; }
	}

	public class ModelMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMappingsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMappingsPropertyMappingParserRuleCall_2_0 = (RuleCall)cMappingsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ModelMapping:
		//
		//	"->" "{" mappings+=PropertyMapping+ "}";
		public ParserRule getRule() { return rule; }

		//"->" "{" mappings+=PropertyMapping+ "}"
		public Group getGroup() { return cGroup; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_0() { return cHyphenMinusGreaterThanSignKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//mappings+=PropertyMapping+
		public Assignment getMappingsAssignment_2() { return cMappingsAssignment_2; }

		//PropertyMapping
		public RuleCall getMappingsPropertyMappingParserRuleCall_2_0() { return cMappingsPropertyMappingParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class PropertyMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescriptionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDescriptionDescriptionParserRuleCall_0_0 = (RuleCall)cDescriptionAssignment_0.eContents().get(0);
		private final Assignment cAttributesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributesAttributeListParserRuleCall_1_0 = (RuleCall)cAttributesAssignment_1.eContents().get(0);
		private final Assignment cFromAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFromPropertyCrossReference_2_0 = (CrossReference)cFromAssignment_2.eContents().get(0);
		private final RuleCall cFromPropertyNameParserRuleCall_2_0_1 = (RuleCall)cFromPropertyCrossReference_2_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameNameParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PropertyMapping:
		//
		//	description=Description? attributes=AttributeList? from=[Property|Name] "->" name=Name ";";
		public ParserRule getRule() { return rule; }

		//description=Description? attributes=AttributeList? from=[Property|Name] "->" name=Name ";"
		public Group getGroup() { return cGroup; }

		//description=Description?
		public Assignment getDescriptionAssignment_0() { return cDescriptionAssignment_0; }

		//Description
		public RuleCall getDescriptionDescriptionParserRuleCall_0_0() { return cDescriptionDescriptionParserRuleCall_0_0; }

		//attributes=AttributeList?
		public Assignment getAttributesAssignment_1() { return cAttributesAssignment_1; }

		//AttributeList
		public RuleCall getAttributesAttributeListParserRuleCall_1_0() { return cAttributesAttributeListParserRuleCall_1_0; }

		//from=[Property|Name]
		public Assignment getFromAssignment_2() { return cFromAssignment_2; }

		//[Property|Name]
		public CrossReference getFromPropertyCrossReference_2_0() { return cFromPropertyCrossReference_2_0; }

		//Name
		public RuleCall getFromPropertyNameParserRuleCall_2_0_1() { return cFromPropertyNameParserRuleCall_2_0_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }

		//name=Name
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//Name
		public RuleCall getNameNameParserRuleCall_4_0() { return cNameNameParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class ModelFoldingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelFolding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFoldingsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFoldingsPropertyFoldingParserRuleCall_2_0 = (RuleCall)cFoldingsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ModelFolding:
		//
		//	"=>" "{" foldings+=PropertyFolding+ "}";
		public ParserRule getRule() { return rule; }

		//"=>" "{" foldings+=PropertyFolding+ "}"
		public Group getGroup() { return cGroup; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_0() { return cEqualsSignGreaterThanSignKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//foldings+=PropertyFolding+
		public Assignment getFoldingsAssignment_2() { return cFoldingsAssignment_2; }

		//PropertyFolding
		public RuleCall getFoldingsPropertyFoldingParserRuleCall_2_0() { return cFoldingsPropertyFoldingParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class PropertyFoldingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyFolding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescriptionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDescriptionDescriptionParserRuleCall_0_0 = (RuleCall)cDescriptionAssignment_0.eContents().get(0);
		private final Assignment cAttributesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributesAttributeListParserRuleCall_1_0 = (RuleCall)cAttributesAssignment_1.eContents().get(0);
		private final Assignment cAggregatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAggregatorQualifiedNameParserRuleCall_2_0 = (RuleCall)cAggregatorAssignment_2.eContents().get(0);
		private final Assignment cFromAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cFromPropertyCrossReference_3_0 = (CrossReference)cFromAssignment_3.eContents().get(0);
		private final RuleCall cFromPropertyNameParserRuleCall_3_0_1 = (RuleCall)cFromPropertyCrossReference_3_0.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameNameParserRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//PropertyFolding:
		//
		//	description=Description? attributes=AttributeList? aggregator=QualifiedName from=[Property|Name] ("->" | "=>")
		//
		//	name=Name ";";
		public ParserRule getRule() { return rule; }

		//description=Description? attributes=AttributeList? aggregator=QualifiedName from=[Property|Name] ("->" | "=>") name=Name
		//
		//";"
		public Group getGroup() { return cGroup; }

		//description=Description?
		public Assignment getDescriptionAssignment_0() { return cDescriptionAssignment_0; }

		//Description
		public RuleCall getDescriptionDescriptionParserRuleCall_0_0() { return cDescriptionDescriptionParserRuleCall_0_0; }

		//attributes=AttributeList?
		public Assignment getAttributesAssignment_1() { return cAttributesAssignment_1; }

		//AttributeList
		public RuleCall getAttributesAttributeListParserRuleCall_1_0() { return cAttributesAttributeListParserRuleCall_1_0; }

		//aggregator=QualifiedName
		public Assignment getAggregatorAssignment_2() { return cAggregatorAssignment_2; }

		//QualifiedName
		public RuleCall getAggregatorQualifiedNameParserRuleCall_2_0() { return cAggregatorQualifiedNameParserRuleCall_2_0; }

		//from=[Property|Name]
		public Assignment getFromAssignment_3() { return cFromAssignment_3; }

		//[Property|Name]
		public CrossReference getFromPropertyCrossReference_3_0() { return cFromPropertyCrossReference_3_0; }

		//Name
		public RuleCall getFromPropertyNameParserRuleCall_3_0_1() { return cFromPropertyNameParserRuleCall_3_0_1; }

		//"->" | "=>"
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_4_0() { return cHyphenMinusGreaterThanSignKeyword_4_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_4_1() { return cEqualsSignGreaterThanSignKeyword_4_1; }

		//name=Name
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//Name
		public RuleCall getNameNameParserRuleCall_5_0() { return cNameNameParserRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPropertyDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPropertyMappingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPropertyFoldingParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Property:
		//
		//	PropertyDefinition | PropertyMapping | PropertyFolding;
		public ParserRule getRule() { return rule; }

		//PropertyDefinition | PropertyMapping | PropertyFolding
		public Alternatives getAlternatives() { return cAlternatives; }

		//PropertyDefinition
		public RuleCall getPropertyDefinitionParserRuleCall_0() { return cPropertyDefinitionParserRuleCall_0; }

		//PropertyMapping
		public RuleCall getPropertyMappingParserRuleCall_1() { return cPropertyMappingParserRuleCall_1; }

		//PropertyFolding
		public RuleCall getPropertyFoldingParserRuleCall_2() { return cPropertyFoldingParserRuleCall_2; }
	}

	public class QualifiedNameObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameObject");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//QualifiedNameObject:
		//
		//	name=QualifiedName;
		public ParserRule getRule() { return rule; }

		//name=QualifiedName
		public Assignment getNameAssignment() { return cNameAssignment; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0() { return cNameQualifiedNameParserRuleCall_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cNameParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName returns ecore::EString:
		//
		//	Name ("." Name)*;
		public ParserRule getRule() { return rule; }

		//Name ("." Name)*
		public Group getGroup() { return cGroup; }

		//Name
		public RuleCall getNameParserRuleCall_0() { return cNameParserRuleCall_0; }

		//("." Name)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//Name
		public RuleCall getNameParserRuleCall_1_1() { return cNameParserRuleCall_1_1; }
	}

	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Name");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNAME_TOKENTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cProjectiveKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cJoinedKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSummarizedKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Name:
		//
		//	NAME_TOKEN | "projective" | "joined" | "summarized";
		public ParserRule getRule() { return rule; }

		//NAME_TOKEN | "projective" | "joined" | "summarized"
		public Alternatives getAlternatives() { return cAlternatives; }

		//NAME_TOKEN
		public RuleCall getNAME_TOKENTerminalRuleCall_0() { return cNAME_TOKENTerminalRuleCall_0; }

		//"projective"
		public Keyword getProjectiveKeyword_1() { return cProjectiveKeyword_1; }

		//"joined"
		public Keyword getJoinedKeyword_2() { return cJoinedKeyword_2; }

		//"summarized"
		public Keyword getSummarizedKeyword_3() { return cSummarizedKeyword_3; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStringValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStringValueSTRINGTerminalRuleCall_0_0 = (RuleCall)cStringValueAssignment_0.eContents().get(0);
		private final Assignment cIntValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIntValueINTTerminalRuleCall_1_0 = (RuleCall)cIntValueAssignment_1.eContents().get(0);
		private final Assignment cDecimalValueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cDecimalValueDECIMALTerminalRuleCall_2_0 = (RuleCall)cDecimalValueAssignment_2.eContents().get(0);
		private final Assignment cBooleanValueAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cBooleanValueBOOLEANEnumRuleCall_3_0 = (RuleCall)cBooleanValueAssignment_3.eContents().get(0);
		
		//Literal:
		//
		//	stringValue=STRING | intValue=INT | decimalValue=DECIMAL | booleanValue=BOOLEAN;
		public ParserRule getRule() { return rule; }

		//stringValue=STRING | intValue=INT | decimalValue=DECIMAL | booleanValue=BOOLEAN
		public Alternatives getAlternatives() { return cAlternatives; }

		//stringValue=STRING
		public Assignment getStringValueAssignment_0() { return cStringValueAssignment_0; }

		//STRING
		public RuleCall getStringValueSTRINGTerminalRuleCall_0_0() { return cStringValueSTRINGTerminalRuleCall_0_0; }

		//intValue=INT
		public Assignment getIntValueAssignment_1() { return cIntValueAssignment_1; }

		//INT
		public RuleCall getIntValueINTTerminalRuleCall_1_0() { return cIntValueINTTerminalRuleCall_1_0; }

		//decimalValue=DECIMAL
		public Assignment getDecimalValueAssignment_2() { return cDecimalValueAssignment_2; }

		//DECIMAL
		public RuleCall getDecimalValueDECIMALTerminalRuleCall_2_0() { return cDecimalValueDECIMALTerminalRuleCall_2_0; }

		//booleanValue=BOOLEAN
		public Assignment getBooleanValueAssignment_3() { return cBooleanValueAssignment_3; }

		//BOOLEAN
		public RuleCall getBooleanValueBOOLEANEnumRuleCall_3_0() { return cBooleanValueBOOLEANEnumRuleCall_3_0; }
	}
	
	
	public class TypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINTINTKeyword_0_0 = (Keyword)cINTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLONGEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLONGLONGKeyword_1_0 = (Keyword)cLONGEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBYTEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBYTEBYTEKeyword_2_0 = (Keyword)cBYTEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSHORTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSHORTSHORTKeyword_3_0 = (Keyword)cSHORTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDECIMALEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDECIMALDECIMALKeyword_4_0 = (Keyword)cDECIMALEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cFLOATEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cFLOATFLOATKeyword_5_0 = (Keyword)cFLOATEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cDOUBLEEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cDOUBLEDOUBLEKeyword_6_0 = (Keyword)cDOUBLEEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cTEXTEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cTEXTTEXTKeyword_7_0 = (Keyword)cTEXTEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEANEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cBOOLEANBOOLEANKeyword_8_0 = (Keyword)cBOOLEANEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cDATEEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cDATEDATEKeyword_9_0 = (Keyword)cDATEEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cDATETIMEEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cDATETIMEDATETIMEKeyword_10_0 = (Keyword)cDATETIMEEnumLiteralDeclaration_10.eContents().get(0);
		
		/// * Basic Types * / enum Type:
		//
		//	INT | LONG | BYTE | SHORT | DECIMAL | FLOAT | DOUBLE | TEXT | BOOLEAN | DATE | DATETIME;
		public EnumRule getRule() { return rule; }

		//INT | LONG | BYTE | SHORT | DECIMAL | FLOAT | DOUBLE | TEXT | BOOLEAN | DATE | DATETIME
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_0() { return cINTEnumLiteralDeclaration_0; }

		//"INT"
		public Keyword getINTINTKeyword_0_0() { return cINTINTKeyword_0_0; }

		//LONG
		public EnumLiteralDeclaration getLONGEnumLiteralDeclaration_1() { return cLONGEnumLiteralDeclaration_1; }

		//"LONG"
		public Keyword getLONGLONGKeyword_1_0() { return cLONGLONGKeyword_1_0; }

		//BYTE
		public EnumLiteralDeclaration getBYTEEnumLiteralDeclaration_2() { return cBYTEEnumLiteralDeclaration_2; }

		//"BYTE"
		public Keyword getBYTEBYTEKeyword_2_0() { return cBYTEBYTEKeyword_2_0; }

		//SHORT
		public EnumLiteralDeclaration getSHORTEnumLiteralDeclaration_3() { return cSHORTEnumLiteralDeclaration_3; }

		//"SHORT"
		public Keyword getSHORTSHORTKeyword_3_0() { return cSHORTSHORTKeyword_3_0; }

		//DECIMAL
		public EnumLiteralDeclaration getDECIMALEnumLiteralDeclaration_4() { return cDECIMALEnumLiteralDeclaration_4; }

		//"DECIMAL"
		public Keyword getDECIMALDECIMALKeyword_4_0() { return cDECIMALDECIMALKeyword_4_0; }

		//FLOAT
		public EnumLiteralDeclaration getFLOATEnumLiteralDeclaration_5() { return cFLOATEnumLiteralDeclaration_5; }

		//"FLOAT"
		public Keyword getFLOATFLOATKeyword_5_0() { return cFLOATFLOATKeyword_5_0; }

		//DOUBLE
		public EnumLiteralDeclaration getDOUBLEEnumLiteralDeclaration_6() { return cDOUBLEEnumLiteralDeclaration_6; }

		//"DOUBLE"
		public Keyword getDOUBLEDOUBLEKeyword_6_0() { return cDOUBLEDOUBLEKeyword_6_0; }

		//TEXT
		public EnumLiteralDeclaration getTEXTEnumLiteralDeclaration_7() { return cTEXTEnumLiteralDeclaration_7; }

		//"TEXT"
		public Keyword getTEXTTEXTKeyword_7_0() { return cTEXTTEXTKeyword_7_0; }

		//BOOLEAN
		public EnumLiteralDeclaration getBOOLEANEnumLiteralDeclaration_8() { return cBOOLEANEnumLiteralDeclaration_8; }

		//"BOOLEAN"
		public Keyword getBOOLEANBOOLEANKeyword_8_0() { return cBOOLEANBOOLEANKeyword_8_0; }

		//DATE
		public EnumLiteralDeclaration getDATEEnumLiteralDeclaration_9() { return cDATEEnumLiteralDeclaration_9; }

		//"DATE"
		public Keyword getDATEDATEKeyword_9_0() { return cDATEDATEKeyword_9_0; }

		//DATETIME
		public EnumLiteralDeclaration getDATETIMEEnumLiteralDeclaration_10() { return cDATETIMEEnumLiteralDeclaration_10; }

		//"DATETIME"
		public Keyword getDATETIMEDATETIMEKeyword_10_0() { return cDATETIMEDATETIMEKeyword_10_0; }
	}

	public class BOOLEANElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTRUEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTRUETRUEKeyword_0_0 = (Keyword)cTRUEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFALSEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFALSEFALSEKeyword_1_0 = (Keyword)cFALSEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BOOLEAN:
		//
		//	TRUE | FALSE;
		public EnumRule getRule() { return rule; }

		//TRUE | FALSE
		public Alternatives getAlternatives() { return cAlternatives; }

		//TRUE
		public EnumLiteralDeclaration getTRUEEnumLiteralDeclaration_0() { return cTRUEEnumLiteralDeclaration_0; }

		//"TRUE"
		public Keyword getTRUETRUEKeyword_0_0() { return cTRUETRUEKeyword_0_0; }

		//FALSE
		public EnumLiteralDeclaration getFALSEEnumLiteralDeclaration_1() { return cFALSEEnumLiteralDeclaration_1; }

		//"FALSE"
		public Keyword getFALSEFALSEKeyword_1_0() { return cFALSEFALSEKeyword_1_0; }
	}
	
	private ScriptElements pScript;
	private ModelDefinitionElements pModelDefinition;
	private RecordExpressionElements pRecordExpression;
	private RecordTermElements pRecordTerm;
	private ModelReferenceElements pModelReference;
	private PropertyDefinitionElements pPropertyDefinition;
	private JoinExpressionElements pJoinExpression;
	private JoinTermElements pJoinTerm;
	private SummarizeExpressionElements pSummarizeExpression;
	private SummarizeTermElements pSummarizeTerm;
	private DescriptionElements pDescription;
	private AttributeListElements pAttributeList;
	private AttributeElements pAttribute;
	private AttributeElementBlockElements pAttributeElementBlock;
	private AttributeElementListElements pAttributeElementList;
	private AttributeElementElements pAttributeElement;
	private AttributeValueElements pAttributeValue;
	private AttributeValueArrayElements pAttributeValueArray;
	private GroupingElements pGrouping;
	private ModelMappingElements pModelMapping;
	private PropertyMappingElements pPropertyMapping;
	private ModelFoldingElements pModelFolding;
	private PropertyFoldingElements pPropertyFolding;
	private PropertyElements pProperty;
	private QualifiedNameObjectElements pQualifiedNameObject;
	private QualifiedNameElements pQualifiedName;
	private NameElements pName;
	private TerminalRule tNAME_TOKEN;
	private TypeElements unknownRuleType;
	private LiteralElements pLiteral;
	private TerminalRule tSTRING;
	private TerminalRule tHEX_CHAR;
	private TerminalRule tOCTAL_ESCAPE;
	private TerminalRule tINT;
	private TerminalRule tDECIMAL;
	private BOOLEANElements unknownRuleBOOLEAN;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public DMDLGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("jp.hishidama.xtext.dmdl_editor.DMDL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Script:
	//
	//	list+=ModelDefinition*;
	public ScriptElements getScriptAccess() {
		return (pScript != null) ? pScript : (pScript = new ScriptElements());
	}
	
	public ParserRule getScriptRule() {
		return getScriptAccess().getRule();
	}

	//ModelDefinition:
	//
	//	description=Description? attributes=AttributeList? (type="projective"? name=Name "=" rhs=RecordExpression |
	//
	//	type="joined" name=Name "=" rhs=JoinExpression | type="summarized" name=Name "=" rhs=SummarizeExpression) ";";
	public ModelDefinitionElements getModelDefinitionAccess() {
		return (pModelDefinition != null) ? pModelDefinition : (pModelDefinition = new ModelDefinitionElements());
	}
	
	public ParserRule getModelDefinitionRule() {
		return getModelDefinitionAccess().getRule();
	}

	//RecordExpression:
	//
	//	terms+=RecordTerm ("+" terms+=RecordTerm)*;
	public RecordExpressionElements getRecordExpressionAccess() {
		return (pRecordExpression != null) ? pRecordExpression : (pRecordExpression = new RecordExpressionElements());
	}
	
	public ParserRule getRecordExpressionRule() {
		return getRecordExpressionAccess().getRule();
	}

	//RecordTerm:
	//
	//	"{" properties+=PropertyDefinition+ "}" | reference=ModelReference;
	public RecordTermElements getRecordTermAccess() {
		return (pRecordTerm != null) ? pRecordTerm : (pRecordTerm = new RecordTermElements());
	}
	
	public ParserRule getRecordTermRule() {
		return getRecordTermAccess().getRule();
	}

	//ModelReference:
	//
	//	name=[ModelDefinition|Name];
	public ModelReferenceElements getModelReferenceAccess() {
		return (pModelReference != null) ? pModelReference : (pModelReference = new ModelReferenceElements());
	}
	
	public ParserRule getModelReferenceRule() {
		return getModelReferenceAccess().getRule();
	}

	//PropertyDefinition:
	//
	//	description=Description? attributes=AttributeList? name=Name ":" type=Type ";";
	public PropertyDefinitionElements getPropertyDefinitionAccess() {
		return (pPropertyDefinition != null) ? pPropertyDefinition : (pPropertyDefinition = new PropertyDefinitionElements());
	}
	
	public ParserRule getPropertyDefinitionRule() {
		return getPropertyDefinitionAccess().getRule();
	}

	//JoinExpression:
	//
	//	terms+=JoinTerm ("+" terms+=JoinTerm)*;
	public JoinExpressionElements getJoinExpressionAccess() {
		return (pJoinExpression != null) ? pJoinExpression : (pJoinExpression = new JoinExpressionElements());
	}
	
	public ParserRule getJoinExpressionRule() {
		return getJoinExpressionAccess().getRule();
	}

	//JoinTerm:
	//
	//	reference=ModelReference mapping=ModelMapping? grouping=Grouping?;
	public JoinTermElements getJoinTermAccess() {
		return (pJoinTerm != null) ? pJoinTerm : (pJoinTerm = new JoinTermElements());
	}
	
	public ParserRule getJoinTermRule() {
		return getJoinTermAccess().getRule();
	}

	//SummarizeExpression:
	//
	//	terms+=SummarizeTerm ("+" terms+=SummarizeTerm)*;
	public SummarizeExpressionElements getSummarizeExpressionAccess() {
		return (pSummarizeExpression != null) ? pSummarizeExpression : (pSummarizeExpression = new SummarizeExpressionElements());
	}
	
	public ParserRule getSummarizeExpressionRule() {
		return getSummarizeExpressionAccess().getRule();
	}

	//SummarizeTerm:
	//
	//	reference=ModelReference folding=ModelFolding grouping=Grouping?;
	public SummarizeTermElements getSummarizeTermAccess() {
		return (pSummarizeTerm != null) ? pSummarizeTerm : (pSummarizeTerm = new SummarizeTermElements());
	}
	
	public ParserRule getSummarizeTermRule() {
		return getSummarizeTermAccess().getRule();
	}

	//Description:
	//
	//	STRING;
	public DescriptionElements getDescriptionAccess() {
		return (pDescription != null) ? pDescription : (pDescription = new DescriptionElements());
	}
	
	public ParserRule getDescriptionRule() {
		return getDescriptionAccess().getRule();
	}

	/// * Attributes * / AttributeList:
	//
	//	attributes+=Attribute+;
	public AttributeListElements getAttributeListAccess() {
		return (pAttributeList != null) ? pAttributeList : (pAttributeList = new AttributeListElements());
	}
	
	public ParserRule getAttributeListRule() {
		return getAttributeListAccess().getRule();
	}

	//Attribute:
	//
	//	"@" name=QualifiedName elementBlock=AttributeElementBlock?;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//AttributeElementBlock:
	//
	//	{AttributeElementBlock} "(" (elements=AttributeElementList ","?)? ")";
	public AttributeElementBlockElements getAttributeElementBlockAccess() {
		return (pAttributeElementBlock != null) ? pAttributeElementBlock : (pAttributeElementBlock = new AttributeElementBlockElements());
	}
	
	public ParserRule getAttributeElementBlockRule() {
		return getAttributeElementBlockAccess().getRule();
	}

	//AttributeElementList:
	//
	//	elements+=AttributeElement ("," elements+=AttributeElement)*;
	public AttributeElementListElements getAttributeElementListAccess() {
		return (pAttributeElementList != null) ? pAttributeElementList : (pAttributeElementList = new AttributeElementListElements());
	}
	
	public ParserRule getAttributeElementListRule() {
		return getAttributeElementListAccess().getRule();
	}

	//AttributeElement:
	//
	//	name=Name "=" value=AttributeValue;
	public AttributeElementElements getAttributeElementAccess() {
		return (pAttributeElement != null) ? pAttributeElement : (pAttributeElement = new AttributeElementElements());
	}
	
	public ParserRule getAttributeElementRule() {
		return getAttributeElementAccess().getRule();
	}

	//AttributeValue:
	//
	//	value=AttributeValueArray | value=QualifiedNameObject | value=Literal;
	public AttributeValueElements getAttributeValueAccess() {
		return (pAttributeValue != null) ? pAttributeValue : (pAttributeValue = new AttributeValueElements());
	}
	
	public ParserRule getAttributeValueRule() {
		return getAttributeValueAccess().getRule();
	}

	//AttributeValueArray:
	//
	//	"{" elements+=AttributeValue ("," elements+=AttributeValue)* ","? "}";
	public AttributeValueArrayElements getAttributeValueArrayAccess() {
		return (pAttributeValueArray != null) ? pAttributeValueArray : (pAttributeValueArray = new AttributeValueArrayElements());
	}
	
	public ParserRule getAttributeValueArrayRule() {
		return getAttributeValueArrayAccess().getRule();
	}

	//Grouping:
	//
	//	"%" name+=[Property|Name] ("," name+=[Property|Name])*;
	public GroupingElements getGroupingAccess() {
		return (pGrouping != null) ? pGrouping : (pGrouping = new GroupingElements());
	}
	
	public ParserRule getGroupingRule() {
		return getGroupingAccess().getRule();
	}

	//ModelMapping:
	//
	//	"->" "{" mappings+=PropertyMapping+ "}";
	public ModelMappingElements getModelMappingAccess() {
		return (pModelMapping != null) ? pModelMapping : (pModelMapping = new ModelMappingElements());
	}
	
	public ParserRule getModelMappingRule() {
		return getModelMappingAccess().getRule();
	}

	//PropertyMapping:
	//
	//	description=Description? attributes=AttributeList? from=[Property|Name] "->" name=Name ";";
	public PropertyMappingElements getPropertyMappingAccess() {
		return (pPropertyMapping != null) ? pPropertyMapping : (pPropertyMapping = new PropertyMappingElements());
	}
	
	public ParserRule getPropertyMappingRule() {
		return getPropertyMappingAccess().getRule();
	}

	//ModelFolding:
	//
	//	"=>" "{" foldings+=PropertyFolding+ "}";
	public ModelFoldingElements getModelFoldingAccess() {
		return (pModelFolding != null) ? pModelFolding : (pModelFolding = new ModelFoldingElements());
	}
	
	public ParserRule getModelFoldingRule() {
		return getModelFoldingAccess().getRule();
	}

	//PropertyFolding:
	//
	//	description=Description? attributes=AttributeList? aggregator=QualifiedName from=[Property|Name] ("->" | "=>")
	//
	//	name=Name ";";
	public PropertyFoldingElements getPropertyFoldingAccess() {
		return (pPropertyFolding != null) ? pPropertyFolding : (pPropertyFolding = new PropertyFoldingElements());
	}
	
	public ParserRule getPropertyFoldingRule() {
		return getPropertyFoldingAccess().getRule();
	}

	//Property:
	//
	//	PropertyDefinition | PropertyMapping | PropertyFolding;
	public PropertyElements getPropertyAccess() {
		return (pProperty != null) ? pProperty : (pProperty = new PropertyElements());
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//QualifiedNameObject:
	//
	//	name=QualifiedName;
	public QualifiedNameObjectElements getQualifiedNameObjectAccess() {
		return (pQualifiedNameObject != null) ? pQualifiedNameObject : (pQualifiedNameObject = new QualifiedNameObjectElements());
	}
	
	public ParserRule getQualifiedNameObjectRule() {
		return getQualifiedNameObjectAccess().getRule();
	}

	//QualifiedName returns ecore::EString:
	//
	//	Name ("." Name)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Name:
	//
	//	NAME_TOKEN | "projective" | "joined" | "summarized";
	public NameElements getNameAccess() {
		return (pName != null) ? pName : (pName = new NameElements());
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}

	//terminal NAME_TOKEN:
	//
	//	"a".."z" ("a".."z" | "0".."9")* ("_" ("a".."z" | "0".."9")+)*;
	public TerminalRule getNAME_TOKENRule() {
		return (tNAME_TOKEN != null) ? tNAME_TOKEN : (tNAME_TOKEN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NAME_TOKEN"));
	} 

	/// * Basic Types * / enum Type:
	//
	//	INT | LONG | BYTE | SHORT | DECIMAL | FLOAT | DOUBLE | TEXT | BOOLEAN | DATE | DATETIME;
	public TypeElements getTypeAccess() {
		return (unknownRuleType != null) ? unknownRuleType : (unknownRuleType = new TypeElements());
	}
	
	public EnumRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Literal:
	//
	//	stringValue=STRING | intValue=INT | decimalValue=DECIMAL | booleanValue=BOOLEAN;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\\") | "\\u" HEX_CHAR HEX_CHAR HEX_CHAR HEX_CHAR | OCTAL_ESCAPE |
	//
	//	!("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal fragment HEX_CHAR:
	//
	//	"0".."9" | "a".."f" | "A".."F";
	public TerminalRule getHEX_CHARRule() {
		return (tHEX_CHAR != null) ? tHEX_CHAR : (tHEX_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX_CHAR"));
	} 

	//terminal fragment OCTAL_ESCAPE:
	//
	//	"\\0" ("0".."7" | "0".."7" "0".."7" | "0".."3" "0".."7" "0".."7");
	public TerminalRule getOCTAL_ESCAPERule() {
		return (tOCTAL_ESCAPE != null) ? tOCTAL_ESCAPE : (tOCTAL_ESCAPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OCTAL_ESCAPE"));
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0" | "1".."9" "0".."9"*;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal DECIMAL returns ecore::EBigDecimal:
	//
	//	"." "0".."9"+ | "0." "0".."9"* | "1".."9" "0".."9"* "." "0".."9"*;
	public TerminalRule getDECIMALRule() {
		return (tDECIMAL != null) ? tDECIMAL : (tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DECIMAL"));
	} 

	//enum BOOLEAN:
	//
	//	TRUE | FALSE;
	public BOOLEANElements getBOOLEANAccess() {
		return (unknownRuleBOOLEAN != null) ? unknownRuleBOOLEAN : (unknownRuleBOOLEAN = new BOOLEANElements());
	}
	
	public EnumRule getBOOLEANRule() {
		return getBOOLEANAccess().getRule();
	}

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//
	//	("//" | "--") !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 
}
