/*
* generated by Xtext
*/
grammar InternalDMDL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package jp.hishidama.xtext.dmdl_editor.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package jp.hishidama.xtext.dmdl_editor.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import jp.hishidama.xtext.dmdl_editor.services.DMDLGrammarAccess;

}

@parser::members {

 	private DMDLGrammarAccess grammarAccess;
 	
    public InternalDMDLParser(TokenStream input, DMDLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Script";	
   	}
   	
   	@Override
   	protected DMDLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleScript
entryRuleScript returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScriptRule()); }
	 iv_ruleScript=ruleScript 
	 { $current=$iv_ruleScript.current; } 
	 EOF 
;

// Rule Script
ruleScript returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getScriptAccess().getListModelDefinitionParserRuleCall_0()); 
	    }
		lv_list_0_0=ruleModelDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScriptRule());
	        }
       		add(
       			$current, 
       			"list",
        		lv_list_0_0, 
        		"ModelDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleModelDefinition
entryRuleModelDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelDefinitionRule()); }
	 iv_ruleModelDefinition=ruleModelDefinition 
	 { $current=$iv_ruleModelDefinition.current; } 
	 EOF 
;

// Rule ModelDefinition
ruleModelDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelDefinitionAccess().getDescriptionDescriptionParserRuleCall_0_0()); 
	    }
		lv_description_0_0=ruleDescription		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelDefinitionRule());
	        }
       		set(
       			$current, 
       			"description",
        		lv_description_0_0, 
        		"Description");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getModelDefinitionAccess().getAttributesAttributeListParserRuleCall_1_0()); 
	    }
		lv_attributes_1_0=ruleAttributeList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelDefinitionRule());
	        }
       		set(
       			$current, 
       			"attributes",
        		lv_attributes_1_0, 
        		"AttributeList");
	        afterParserOrEnumRuleCall();
	    }

)
)?(((
(
		{ 
	        newCompositeNode(grammarAccess.getModelDefinitionAccess().getNameNameParserRuleCall_2_0_0_0()); 
	    }
		lv_name_2_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getModelDefinitionAccess().getEqualsSignKeyword_2_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelDefinitionAccess().getRhsRecordExpressionParserRuleCall_2_0_2_0()); 
	    }
		lv_rhs_4_0=ruleRecordExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelDefinitionRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_4_0, 
        		"RecordExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_5='projective' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getModelDefinitionAccess().getProjectiveKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelDefinitionAccess().getNameNameParserRuleCall_2_1_1_0()); 
	    }
		lv_name_6_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_6_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7='=' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getModelDefinitionAccess().getEqualsSignKeyword_2_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelDefinitionAccess().getRhsRecordExpressionParserRuleCall_2_1_3_0()); 
	    }
		lv_rhs_8_0=ruleRecordExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelDefinitionRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_8_0, 
        		"RecordExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_9='joined' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getModelDefinitionAccess().getJoinedKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelDefinitionAccess().getNameNameParserRuleCall_2_2_1_0()); 
	    }
		lv_name_10_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_10_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11='=' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getModelDefinitionAccess().getEqualsSignKeyword_2_2_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelDefinitionAccess().getRhsJoinExpressionParserRuleCall_2_2_3_0()); 
	    }
		lv_rhs_12_0=ruleJoinExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelDefinitionRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_12_0, 
        		"JoinExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_13='summarized' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getModelDefinitionAccess().getSummarizedKeyword_2_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelDefinitionAccess().getNameNameParserRuleCall_2_3_1_0()); 
	    }
		lv_name_14_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_14_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_15='=' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getModelDefinitionAccess().getEqualsSignKeyword_2_3_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelDefinitionAccess().getRhsSummarizeExpressionParserRuleCall_2_3_3_0()); 
	    }
		lv_rhs_16_0=ruleSummarizeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelDefinitionRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_16_0, 
        		"SummarizeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))	otherlv_17=';' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getModelDefinitionAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleRecordExpression
entryRuleRecordExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecordExpressionRule()); }
	 iv_ruleRecordExpression=ruleRecordExpression 
	 { $current=$iv_ruleRecordExpression.current; } 
	 EOF 
;

// Rule RecordExpression
ruleRecordExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRecordExpressionAccess().getTermsRecordTermParserRuleCall_0_0()); 
	    }
		lv_terms_0_0=ruleRecordTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordExpressionRule());
	        }
       		add(
       			$current, 
       			"terms",
        		lv_terms_0_0, 
        		"RecordTerm");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='+' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRecordExpressionAccess().getPlusSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordExpressionAccess().getTermsRecordTermParserRuleCall_1_1_0()); 
	    }
		lv_terms_2_0=ruleRecordTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordExpressionRule());
	        }
       		add(
       			$current, 
       			"terms",
        		lv_terms_2_0, 
        		"RecordTerm");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRecordTerm
entryRuleRecordTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecordTermRule()); }
	 iv_ruleRecordTerm=ruleRecordTerm 
	 { $current=$iv_ruleRecordTerm.current; } 
	 EOF 
;

// Rule RecordTerm
ruleRecordTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRecordTermAccess().getLeftCurlyBracketKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordTermAccess().getPropertiesPropertyDefinitionParserRuleCall_0_1_0()); 
	    }
		lv_properties_1_0=rulePropertyDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordTermRule());
	        }
       		add(
       			$current, 
       			"properties",
        		lv_properties_1_0, 
        		"PropertyDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_2='}' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRecordTermAccess().getRightCurlyBracketKeyword_0_2());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordTermAccess().getReferenceModelReferenceParserRuleCall_1_0()); 
	    }
		lv_reference_3_0=ruleModelReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordTermRule());
	        }
       		set(
       			$current, 
       			"reference",
        		lv_reference_3_0, 
        		"ModelReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleModelReference
entryRuleModelReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelReferenceRule()); }
	 iv_ruleModelReference=ruleModelReference 
	 { $current=$iv_ruleModelReference.current; } 
	 EOF 
;

// Rule ModelReference
ruleModelReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelReferenceAccess().getNameNameParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelReferenceRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRulePropertyDefinition
entryRulePropertyDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyDefinitionRule()); }
	 iv_rulePropertyDefinition=rulePropertyDefinition 
	 { $current=$iv_rulePropertyDefinition.current; } 
	 EOF 
;

// Rule PropertyDefinition
rulePropertyDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyDefinitionAccess().getDescriptionDescriptionParserRuleCall_0_0()); 
	    }
		lv_description_0_0=ruleDescription		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyDefinitionRule());
	        }
       		set(
       			$current, 
       			"description",
        		lv_description_0_0, 
        		"Description");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyDefinitionAccess().getAttributesAttributeListParserRuleCall_1_0()); 
	    }
		lv_attributes_1_0=ruleAttributeList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyDefinitionRule());
	        }
       		set(
       			$current, 
       			"attributes",
        		lv_attributes_1_0, 
        		"AttributeList");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyDefinitionAccess().getNameNameParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPropertyDefinitionAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyDefinitionAccess().getTypeTypeEnumRuleCall_4_0()); 
	    }
		lv_type_4_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyDefinitionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPropertyDefinitionAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleJoinExpression
entryRuleJoinExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJoinExpressionRule()); }
	 iv_ruleJoinExpression=ruleJoinExpression 
	 { $current=$iv_ruleJoinExpression.current; } 
	 EOF 
;

// Rule JoinExpression
ruleJoinExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getJoinExpressionAccess().getTermsJoinTermParserRuleCall_0_0()); 
	    }
		lv_terms_0_0=ruleJoinTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJoinExpressionRule());
	        }
       		add(
       			$current, 
       			"terms",
        		lv_terms_0_0, 
        		"JoinTerm");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='+' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getJoinExpressionAccess().getPlusSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJoinExpressionAccess().getTermsJoinTermParserRuleCall_1_1_0()); 
	    }
		lv_terms_2_0=ruleJoinTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJoinExpressionRule());
	        }
       		add(
       			$current, 
       			"terms",
        		lv_terms_2_0, 
        		"JoinTerm");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleJoinTerm
entryRuleJoinTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJoinTermRule()); }
	 iv_ruleJoinTerm=ruleJoinTerm 
	 { $current=$iv_ruleJoinTerm.current; } 
	 EOF 
;

// Rule JoinTerm
ruleJoinTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getJoinTermAccess().getReferenceModelReferenceParserRuleCall_0_0()); 
	    }
		lv_reference_0_0=ruleModelReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJoinTermRule());
	        }
       		set(
       			$current, 
       			"reference",
        		lv_reference_0_0, 
        		"ModelReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getJoinTermAccess().getMappingModelMappingParserRuleCall_1_0()); 
	    }
		lv_mapping_1_0=ruleModelMapping		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJoinTermRule());
	        }
       		set(
       			$current, 
       			"mapping",
        		lv_mapping_1_0, 
        		"ModelMapping");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getJoinTermAccess().getGroupingGroupingParserRuleCall_2_0()); 
	    }
		lv_grouping_2_0=ruleGrouping		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJoinTermRule());
	        }
       		set(
       			$current, 
       			"grouping",
        		lv_grouping_2_0, 
        		"Grouping");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleSummarizeExpression
entryRuleSummarizeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSummarizeExpressionRule()); }
	 iv_ruleSummarizeExpression=ruleSummarizeExpression 
	 { $current=$iv_ruleSummarizeExpression.current; } 
	 EOF 
;

// Rule SummarizeExpression
ruleSummarizeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSummarizeExpressionAccess().getTermsSummarizeTermParserRuleCall_0_0()); 
	    }
		lv_terms_0_0=ruleSummarizeTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSummarizeExpressionRule());
	        }
       		add(
       			$current, 
       			"terms",
        		lv_terms_0_0, 
        		"SummarizeTerm");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='+' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSummarizeExpressionAccess().getPlusSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSummarizeExpressionAccess().getTermsSummarizeTermParserRuleCall_1_1_0()); 
	    }
		lv_terms_2_0=ruleSummarizeTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSummarizeExpressionRule());
	        }
       		add(
       			$current, 
       			"terms",
        		lv_terms_2_0, 
        		"SummarizeTerm");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleSummarizeTerm
entryRuleSummarizeTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSummarizeTermRule()); }
	 iv_ruleSummarizeTerm=ruleSummarizeTerm 
	 { $current=$iv_ruleSummarizeTerm.current; } 
	 EOF 
;

// Rule SummarizeTerm
ruleSummarizeTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSummarizeTermAccess().getReferenceModelReferenceParserRuleCall_0_0()); 
	    }
		lv_reference_0_0=ruleModelReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSummarizeTermRule());
	        }
       		set(
       			$current, 
       			"reference",
        		lv_reference_0_0, 
        		"ModelReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSummarizeTermAccess().getFoldingModelFoldingParserRuleCall_1_0()); 
	    }
		lv_folding_1_0=ruleModelFolding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSummarizeTermRule());
	        }
       		set(
       			$current, 
       			"folding",
        		lv_folding_1_0, 
        		"ModelFolding");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSummarizeTermAccess().getGroupingGroupingParserRuleCall_2_0()); 
	    }
		lv_grouping_2_0=ruleGrouping		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSummarizeTermRule());
	        }
       		set(
       			$current, 
       			"grouping",
        		lv_grouping_2_0, 
        		"Grouping");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleDescription
entryRuleDescription returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDescriptionRule()); } 
	 iv_ruleDescription=ruleDescription 
	 { $current=$iv_ruleDescription.current.getText(); }  
	 EOF 
;

// Rule Description
ruleDescription returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getDescriptionAccess().getSTRINGTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleAttributeList
entryRuleAttributeList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeListRule()); }
	 iv_ruleAttributeList=ruleAttributeList 
	 { $current=$iv_ruleAttributeList.current; } 
	 EOF 
;

// Rule AttributeList
ruleAttributeList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeListAccess().getAttributesAttributeParserRuleCall_0()); 
	    }
		lv_attributes_0_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeListRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_0_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAttributeAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeAccess().getNameQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAttributeAccess().getLeftParenthesisKeyword_2_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeAccess().getElementsAttributeElementListParserRuleCall_2_1_0_0()); 
	    }
		lv_elements_3_0=ruleAttributeElementList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRule());
	        }
       		set(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"AttributeElementList");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAttributeAccess().getCommaKeyword_2_1_1());
    }
)?)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAttributeAccess().getRightParenthesisKeyword_2_2());
    }
)?)
;





// Entry rule entryRuleAttributeElementList
entryRuleAttributeElementList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeElementListRule()); }
	 iv_ruleAttributeElementList=ruleAttributeElementList 
	 { $current=$iv_ruleAttributeElementList.current; } 
	 EOF 
;

// Rule AttributeElementList
ruleAttributeElementList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeElementListAccess().getElementsAttributeElementParserRuleCall_0_0()); 
	    }
		lv_elements_0_0=ruleAttributeElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeElementListRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_0_0, 
        		"AttributeElement");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAttributeElementListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeElementListAccess().getElementsAttributeElementParserRuleCall_1_1_0()); 
	    }
		lv_elements_2_0=ruleAttributeElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeElementListRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_2_0, 
        		"AttributeElement");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAttributeElement
entryRuleAttributeElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeElementRule()); }
	 iv_ruleAttributeElement=ruleAttributeElement 
	 { $current=$iv_ruleAttributeElement.current; } 
	 EOF 
;

// Rule AttributeElement
ruleAttributeElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeElementAccess().getNameNameParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeElementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAttributeElementAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeElementAccess().getValueAttributeValueParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleAttributeValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeElementRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"AttributeValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAttributeValue
entryRuleAttributeValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeValueRule()); }
	 iv_ruleAttributeValue=ruleAttributeValue 
	 { $current=$iv_ruleAttributeValue.current; } 
	 EOF 
;

// Rule AttributeValue
ruleAttributeValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeValueAccess().getValueAttributeValueArrayParserRuleCall_0_0()); 
	    }
		lv_value_0_0=ruleAttributeValueArray		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeValueRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"AttributeValueArray");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeValueAccess().getValueQualifiedNameObjectParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleQualifiedNameObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeValueRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"QualifiedNameObject");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeValueAccess().getValueLiteralParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeValueRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAttributeValueArray
entryRuleAttributeValueArray returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeValueArrayRule()); }
	 iv_ruleAttributeValueArray=ruleAttributeValueArray 
	 { $current=$iv_ruleAttributeValueArray.current; } 
	 EOF 
;

// Rule AttributeValueArray
ruleAttributeValueArray returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAttributeValueArrayAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeValueArrayAccess().getElementsAttributeValueParserRuleCall_1_0()); 
	    }
		lv_elements_1_0=ruleAttributeValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeValueArrayRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_1_0, 
        		"AttributeValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAttributeValueArrayAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeValueArrayAccess().getElementsAttributeValueParserRuleCall_2_1_0()); 
	    }
		lv_elements_3_0=ruleAttributeValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeValueArrayRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"AttributeValue");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAttributeValueArrayAccess().getCommaKeyword_3());
    }
)?	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAttributeValueArrayAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleGrouping
entryRuleGrouping returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGroupingRule()); }
	 iv_ruleGrouping=ruleGrouping 
	 { $current=$iv_ruleGrouping.current; } 
	 EOF 
;

// Rule Grouping
ruleGrouping returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='%' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGroupingAccess().getPercentSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupingAccess().getNameNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupingRule());
	        }
       		add(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGroupingAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupingAccess().getNameNameParserRuleCall_2_1_0()); 
	    }
		lv_name_3_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupingRule());
	        }
       		add(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleModelMapping
entryRuleModelMapping returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelMappingRule()); }
	 iv_ruleModelMapping=ruleModelMapping 
	 { $current=$iv_ruleModelMapping.current; } 
	 EOF 
;

// Rule ModelMapping
ruleModelMapping returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='->' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModelMappingAccess().getHyphenMinusGreaterThanSignKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModelMappingAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelMappingAccess().getMappingsPropertyMappingParserRuleCall_2_0()); 
	    }
		lv_mappings_2_0=rulePropertyMapping		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelMappingRule());
	        }
       		add(
       			$current, 
       			"mappings",
        		lv_mappings_2_0, 
        		"PropertyMapping");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getModelMappingAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRulePropertyMapping
entryRulePropertyMapping returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyMappingRule()); }
	 iv_rulePropertyMapping=rulePropertyMapping 
	 { $current=$iv_rulePropertyMapping.current; } 
	 EOF 
;

// Rule PropertyMapping
rulePropertyMapping returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyMappingAccess().getDescriptionDescriptionParserRuleCall_0_0()); 
	    }
		lv_description_0_0=ruleDescription		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyMappingRule());
	        }
       		set(
       			$current, 
       			"description",
        		lv_description_0_0, 
        		"Description");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyMappingAccess().getAttributesAttributeListParserRuleCall_1_0()); 
	    }
		lv_attributes_1_0=ruleAttributeList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyMappingRule());
	        }
       		set(
       			$current, 
       			"attributes",
        		lv_attributes_1_0, 
        		"AttributeList");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyMappingAccess().getFromNameParserRuleCall_2_0()); 
	    }
		lv_from_2_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyMappingRule());
	        }
       		set(
       			$current, 
       			"from",
        		lv_from_2_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='->' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPropertyMappingAccess().getHyphenMinusGreaterThanSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyMappingAccess().getNameNameParserRuleCall_4_0()); 
	    }
		lv_name_4_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyMappingRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPropertyMappingAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleModelFolding
entryRuleModelFolding returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelFoldingRule()); }
	 iv_ruleModelFolding=ruleModelFolding 
	 { $current=$iv_ruleModelFolding.current; } 
	 EOF 
;

// Rule ModelFolding
ruleModelFolding returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='=>' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModelFoldingAccess().getEqualsSignGreaterThanSignKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModelFoldingAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelFoldingAccess().getFoldingsPropertyFoldingParserRuleCall_2_0()); 
	    }
		lv_foldings_2_0=rulePropertyFolding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelFoldingRule());
	        }
       		add(
       			$current, 
       			"foldings",
        		lv_foldings_2_0, 
        		"PropertyFolding");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getModelFoldingAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRulePropertyFolding
entryRulePropertyFolding returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyFoldingRule()); }
	 iv_rulePropertyFolding=rulePropertyFolding 
	 { $current=$iv_rulePropertyFolding.current; } 
	 EOF 
;

// Rule PropertyFolding
rulePropertyFolding returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyFoldingAccess().getDescriptionDescriptionParserRuleCall_0_0()); 
	    }
		lv_description_0_0=ruleDescription		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyFoldingRule());
	        }
       		set(
       			$current, 
       			"description",
        		lv_description_0_0, 
        		"Description");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyFoldingAccess().getAttributesAttributeListParserRuleCall_1_0()); 
	    }
		lv_attributes_1_0=ruleAttributeList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyFoldingRule());
	        }
       		set(
       			$current, 
       			"attributes",
        		lv_attributes_1_0, 
        		"AttributeList");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyFoldingAccess().getAggregatorQualifiedNameParserRuleCall_2_0()); 
	    }
		lv_aggregator_2_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyFoldingRule());
	        }
       		set(
       			$current, 
       			"aggregator",
        		lv_aggregator_2_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyFoldingAccess().getFromNameParserRuleCall_3_0()); 
	    }
		lv_from_3_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyFoldingRule());
	        }
       		set(
       			$current, 
       			"from",
        		lv_from_3_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='->' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPropertyFoldingAccess().getHyphenMinusGreaterThanSignKeyword_4_0());
    }

    |	otherlv_5='=>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPropertyFoldingAccess().getEqualsSignGreaterThanSignKeyword_4_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyFoldingAccess().getNameNameParserRuleCall_5_0()); 
	    }
		lv_name_6_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyFoldingRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_6_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPropertyFoldingAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleQualifiedNameObject
entryRuleQualifiedNameObject returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameObjectRule()); }
	 iv_ruleQualifiedNameObject=ruleQualifiedNameObject 
	 { $current=$iv_ruleQualifiedNameObject.current; } 
	 EOF 
;

// Rule QualifiedNameObject
ruleQualifiedNameObject returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getQualifiedNameObjectAccess().getNameQualifiedNameParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifiedNameObjectRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getNameParserRuleCall_0()); 
    }
    this_Name_0=ruleName    {
		$current.merge(this_Name_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getNameParserRuleCall_1_1()); 
    }
    this_Name_2=ruleName    {
		$current.merge(this_Name_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleName
entryRuleName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNameRule()); } 
	 iv_ruleName=ruleName 
	 { $current=$iv_ruleName.current.getText(); }  
	 EOF 
;

// Rule Name
ruleName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_NAME_TOKEN_0=RULE_NAME_TOKEN    {
		$current.merge(this_NAME_TOKEN_0);
    }

    { 
    newLeafNode(this_NAME_TOKEN_0, grammarAccess.getNameAccess().getNAME_TOKENTerminalRuleCall_0()); 
    }

    |
	kw='projective' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNameAccess().getProjectiveKeyword_1()); 
    }

    |
	kw='joined' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNameAccess().getJoinedKeyword_2()); 
    }

    |
	kw='summarized' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNameAccess().getSummarizedKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_stringValue_0_0=RULE_STRING
		{
			newLeafNode(lv_stringValue_0_0, grammarAccess.getLiteralAccess().getStringValueSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"stringValue",
        		lv_stringValue_0_0, 
        		"STRING");
	    }

)
)
    |(
(
		lv_intValue_1_0=RULE_INT
		{
			newLeafNode(lv_intValue_1_0, grammarAccess.getLiteralAccess().getIntValueINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"intValue",
        		lv_intValue_1_0, 
        		"INT");
	    }

)
)
    |(
(
		lv_decimalValue_2_0=RULE_DECIMAL
		{
			newLeafNode(lv_decimalValue_2_0, grammarAccess.getLiteralAccess().getDecimalValueDECIMALTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"decimalValue",
        		lv_decimalValue_2_0, 
        		"DECIMAL");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralAccess().getBooleanValueBOOLEANEnumRuleCall_3_0()); 
	    }
		lv_booleanValue_3_0=ruleBOOLEAN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralRule());
	        }
       		set(
       			$current, 
       			"booleanValue",
        		lv_booleanValue_3_0, 
        		"BOOLEAN");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Rule Type
ruleType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='INT' 
	{
        $current = grammarAccess.getTypeAccess().getINTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getTypeAccess().getINTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='LONG' 
	{
        $current = grammarAccess.getTypeAccess().getLONGEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getTypeAccess().getLONGEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='BYTE' 
	{
        $current = grammarAccess.getTypeAccess().getBYTEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getTypeAccess().getBYTEEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='SHORT' 
	{
        $current = grammarAccess.getTypeAccess().getSHORTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getTypeAccess().getSHORTEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='DECIMAL' 
	{
        $current = grammarAccess.getTypeAccess().getDECIMALEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getTypeAccess().getDECIMALEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='FLOAT' 
	{
        $current = grammarAccess.getTypeAccess().getFLOATEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getTypeAccess().getFLOATEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='DOUBLE' 
	{
        $current = grammarAccess.getTypeAccess().getDOUBLEEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getTypeAccess().getDOUBLEEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='TEXT' 
	{
        $current = grammarAccess.getTypeAccess().getTEXTEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getTypeAccess().getTEXTEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='BOOLEAN' 
	{
        $current = grammarAccess.getTypeAccess().getBOOLEANEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getTypeAccess().getBOOLEANEnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='DATE' 
	{
        $current = grammarAccess.getTypeAccess().getDATEEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getTypeAccess().getDATEEnumLiteralDeclaration_9()); 
    }
)
    |(	enumLiteral_10='DATETIME' 
	{
        $current = grammarAccess.getTypeAccess().getDATETIMEEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_10, grammarAccess.getTypeAccess().getDATETIMEEnumLiteralDeclaration_10()); 
    }
));



// Rule BOOLEAN
ruleBOOLEAN returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='TRUE' 
	{
        $current = grammarAccess.getBOOLEANAccess().getTRUEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBOOLEANAccess().getTRUEEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='FALSE' 
	{
        $current = grammarAccess.getBOOLEANAccess().getFALSEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBOOLEANAccess().getFALSEEnumLiteralDeclaration_1()); 
    }
));



RULE_NAME_TOKEN : 'a'..'z' ('a'..'z'|'0'..'9')* ('_' ('a'..'z'|'0'..'9')+)*;

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\\')|~(('\\'|'"')))* '"';

RULE_INT : ('0'|'1'..'9' ('0'..'9')*);

RULE_DECIMAL : ('.' ('0'..'9')+|'0.' ('0'..'9')*|'1'..'9' ('0'..'9')* '.' ('0'..'9')*);

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : ('//'|'--') ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;


