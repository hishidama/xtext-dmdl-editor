/*
* generated by Xtext
*/
grammar InternalDMDL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package jp.hishidama.xtext.dmdl_editor.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package jp.hishidama.xtext.dmdl_editor.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import jp.hishidama.xtext.dmdl_editor.services.DMDLGrammarAccess;

}

@parser::members {

 	private DMDLGrammarAccess grammarAccess;
 	
    public InternalDMDLParser(TokenStream input, DMDLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Models";	
   	}
   	
   	@Override
   	protected DMDLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModels
entryRuleModels returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelsRule()); }
	 iv_ruleModels=ruleModels 
	 { $current=$iv_ruleModels.current; } 
	 EOF 
;

// Rule Models
ruleModels returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelsAccess().getListModelDefinitionParserRuleCall_0()); 
	    }
		lv_list_0_0=ruleModelDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelsRule());
	        }
       		add(
       			$current, 
       			"list",
        		lv_list_0_0, 
        		"ModelDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleModelDefinition
entryRuleModelDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelDefinitionRule()); }
	 iv_ruleModelDefinition=ruleModelDefinition 
	 { $current=$iv_ruleModelDefinition.current; } 
	 EOF 
;

// Rule ModelDefinition
ruleModelDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelDefinitionAccess().getNameNameParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModelDefinitionAccess().getEqualsSignKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getModelDefinitionAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getModelDefinitionAccess().getRightCurlyBracketKeyword_3());
    }
	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getModelDefinitionAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleName
entryRuleName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNameRule()); } 
	 iv_ruleName=ruleName 
	 { $current=$iv_ruleName.current.getText(); }  
	 EOF 
;

// Rule Name
ruleName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_NAME_TOKEN_0=RULE_NAME_TOKEN    {
		$current.merge(this_NAME_TOKEN_0);
    }

    { 
    newLeafNode(this_NAME_TOKEN_0, grammarAccess.getNameAccess().getNAME_TOKENTerminalRuleCall()); 
    }

    ;





RULE_NAME_TOKEN : 'a'..'z' ('a'..'z'|'0'..'9')* ('_' ('a'..'z'|'0'..'9')+)*;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : ('//'|'--') ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;


