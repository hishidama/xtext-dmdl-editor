/*
* generated by Xtext
*/
grammar InternalDMDL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package jp.hishidama.xtext.dmdl_editor.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package jp.hishidama.xtext.dmdl_editor.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import jp.hishidama.xtext.dmdl_editor.services.DMDLGrammarAccess;

}

@parser::members {

 	private DMDLGrammarAccess grammarAccess;
 	
    public InternalDMDLParser(TokenStream input, DMDLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Models";	
   	}
   	
   	@Override
   	protected DMDLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModels
entryRuleModels returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelsRule()); }
	 iv_ruleModels=ruleModels 
	 { $current=$iv_ruleModels.current; } 
	 EOF 
;

// Rule Models
ruleModels returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelsAccess().getListModelDefinitionParserRuleCall_0()); 
	    }
		lv_list_0_0=ruleModelDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelsRule());
	        }
       		add(
       			$current, 
       			"list",
        		lv_list_0_0, 
        		"ModelDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleModelDefinition
entryRuleModelDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelDefinitionRule()); }
	 iv_ruleModelDefinition=ruleModelDefinition 
	 { $current=$iv_ruleModelDefinition.current; } 
	 EOF 
;

// Rule ModelDefinition
ruleModelDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getModelDefinitionAccess().getRecordModelDefinitionParserRuleCall()); 
    }
    this_RecordModelDefinition_0=ruleRecordModelDefinition
    { 
        $current = $this_RecordModelDefinition_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleRecordModelDefinition
entryRuleRecordModelDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecordModelDefinitionRule()); }
	 iv_ruleRecordModelDefinition=ruleRecordModelDefinition 
	 { $current=$iv_ruleRecordModelDefinition.current; } 
	 EOF 
;

// Rule RecordModelDefinition
ruleRecordModelDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRecordModelDefinitionAccess().getNameNameParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordModelDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRecordModelDefinitionAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordModelDefinitionAccess().getRhsRecordExpressionParserRuleCall_2_0()); 
	    }
		lv_rhs_2_0=ruleRecordExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordModelDefinitionRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_2_0, 
        		"RecordExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRecordModelDefinitionAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleRecordExpression
entryRuleRecordExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecordExpressionRule()); }
	 iv_ruleRecordExpression=ruleRecordExpression 
	 { $current=$iv_ruleRecordExpression.current; } 
	 EOF 
;

// Rule RecordExpression
ruleRecordExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRecordExpressionAccess().getBlockRecordTermParserRuleCall_0_0()); 
	    }
		lv_block_0_0=ruleRecordTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordExpressionRule());
	        }
       		add(
       			$current, 
       			"block",
        		lv_block_0_0, 
        		"RecordTerm");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='+' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRecordExpressionAccess().getPlusSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordExpressionAccess().getBlockRecordTermParserRuleCall_1_1_0()); 
	    }
		lv_block_2_0=ruleRecordTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordExpressionRule());
	        }
       		add(
       			$current, 
       			"block",
        		lv_block_2_0, 
        		"RecordTerm");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRecordTerm
entryRuleRecordTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecordTermRule()); }
	 iv_ruleRecordTerm=ruleRecordTerm 
	 { $current=$iv_ruleRecordTerm.current; } 
	 EOF 
;

// Rule RecordTerm
ruleRecordTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRecordTermAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordTermAccess().getPropertiesPropertyDefinitionParserRuleCall_1_0()); 
	    }
		lv_properties_1_0=rulePropertyDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordTermRule());
	        }
       		add(
       			$current, 
       			"properties",
        		lv_properties_1_0, 
        		"PropertyDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_2='}' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRecordTermAccess().getRightCurlyBracketKeyword_2());
    }
)
;





// Entry rule entryRulePropertyDefinition
entryRulePropertyDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyDefinitionRule()); }
	 iv_rulePropertyDefinition=rulePropertyDefinition 
	 { $current=$iv_rulePropertyDefinition.current; } 
	 EOF 
;

// Rule PropertyDefinition
rulePropertyDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyDefinitionAccess().getNameNameParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPropertyDefinitionAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyDefinitionAccess().getTypeTypeEnumRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyDefinitionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPropertyDefinitionAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleName
entryRuleName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNameRule()); } 
	 iv_ruleName=ruleName 
	 { $current=$iv_ruleName.current.getText(); }  
	 EOF 
;

// Rule Name
ruleName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_NAME_TOKEN_0=RULE_NAME_TOKEN    {
		$current.merge(this_NAME_TOKEN_0);
    }

    { 
    newLeafNode(this_NAME_TOKEN_0, grammarAccess.getNameAccess().getNAME_TOKENTerminalRuleCall()); 
    }

    ;





// Rule Type
ruleType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='INT' 
	{
        $current = grammarAccess.getTypeAccess().getINTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getTypeAccess().getINTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='LONG' 
	{
        $current = grammarAccess.getTypeAccess().getLONGEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getTypeAccess().getLONGEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='BYTE' 
	{
        $current = grammarAccess.getTypeAccess().getBYTEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getTypeAccess().getBYTEEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='SHORT' 
	{
        $current = grammarAccess.getTypeAccess().getSHORTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getTypeAccess().getSHORTEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='DECIMAL' 
	{
        $current = grammarAccess.getTypeAccess().getDECIMALEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getTypeAccess().getDECIMALEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='FLOAT' 
	{
        $current = grammarAccess.getTypeAccess().getFLOATEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getTypeAccess().getFLOATEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='DOUBLE' 
	{
        $current = grammarAccess.getTypeAccess().getDOUBLEEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getTypeAccess().getDOUBLEEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='TEXT' 
	{
        $current = grammarAccess.getTypeAccess().getTEXTEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getTypeAccess().getTEXTEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='BOOLEAN' 
	{
        $current = grammarAccess.getTypeAccess().getBOOLEANEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getTypeAccess().getBOOLEANEnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='DATE' 
	{
        $current = grammarAccess.getTypeAccess().getDATEEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getTypeAccess().getDATEEnumLiteralDeclaration_9()); 
    }
)
    |(	enumLiteral_10='DATETIME' 
	{
        $current = grammarAccess.getTypeAccess().getDATETIMEEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_10, grammarAccess.getTypeAccess().getDATETIMEEnumLiteralDeclaration_10()); 
    }
));



RULE_NAME_TOKEN : 'a'..'z' ('a'..'z'|'0'..'9')* ('_' ('a'..'z'|'0'..'9')+)*;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : ('//'|'--') ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;


