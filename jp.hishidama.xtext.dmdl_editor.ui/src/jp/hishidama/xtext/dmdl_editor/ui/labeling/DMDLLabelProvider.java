/*
 * first generated by Xtext
 */
package jp.hishidama.xtext.dmdl_editor.ui.labeling;

import java.util.List;

import jp.hishidama.xtext.dmdl_editor.dmdl.Attribute;
import jp.hishidama.xtext.dmdl_editor.dmdl.AttributeElement;
import jp.hishidama.xtext.dmdl_editor.dmdl.AttributeList;
import jp.hishidama.xtext.dmdl_editor.dmdl.DmdlPackage;
import jp.hishidama.xtext.dmdl_editor.dmdl.Grouping;
import jp.hishidama.xtext.dmdl_editor.dmdl.JoinTerm;
import jp.hishidama.xtext.dmdl_editor.dmdl.ModelDefinition;
import jp.hishidama.xtext.dmdl_editor.dmdl.ModelReference;
import jp.hishidama.xtext.dmdl_editor.dmdl.Property;
import jp.hishidama.xtext.dmdl_editor.dmdl.PropertyUtil;
import jp.hishidama.xtext.dmdl_editor.dmdl.SummarizeTerm;
import jp.hishidama.xtext.dmdl_editor.dmdl.Type;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.jface.viewers.StyledString;
import org.eclipse.swt.graphics.Image;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.nodemodel.util.NodeModelUtils;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;

import com.google.inject.Inject;

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
 */
public class DMDLLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	public DMDLLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	protected Object text(AttributeList a) {
		return "<attributes>";
	}

	protected Object text(Attribute a) {
		return "@" + a.getName();
	}

	protected Object text(Type type) {
		return PropertyUtil.getDataTypeText(type);
	}

	protected Object text(Grouping group) {
		List<INode> list = null;
		{
			EObject term = group.eContainer();
			if (term instanceof JoinTerm) {
				list = NodeModelUtils.findNodesForFeature(term, DmdlPackage.Literals.JOIN_TERM__REFERENCE);
			} else if (term instanceof SummarizeTerm) {
				list = NodeModelUtils.findNodesForFeature(term, DmdlPackage.Literals.SUMMARIZE_TERM__REFERENCE);
			}
		}
		if (list != null && !list.isEmpty()) {
			String name = list.get(0).getText();
			StyledString ss = new StyledString("<grouping>");
			ss.append(" " + name, StyledString.DECORATIONS_STYLER);
			return ss;
		}

		return "<grouping>";
	}

	/*
	 * image
	 */

	protected Image image(ModelDefinition model) {
		return DMDLImages.getDataModelImage(model);
	}

	protected Image image(ModelReference ref) {
		return image(ref.getName());
	}

	protected Image image(Property p) {
		return DMDLImages.getPropertyImage();
	}

	protected Image image(Attribute a) {
		return DMDLImages.getAttributeImage();
	}

	protected Image image(AttributeElement e) {
		return DMDLImages.getPropertyImage();
	}
}
